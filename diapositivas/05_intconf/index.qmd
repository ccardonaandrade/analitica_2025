---
title: Analítica de los Negocios
author: Carlos Cardona Andrade
subtitle: Distribución muestral e Intervalos de Confianza
execute:
  freeze: auto
  echo: true
  fig-width: 6
  fig-height: 5
format:
  revealjs: 
   theme: ../slides.scss
   header-includes: |
      <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" rel="stylesheet"/>
   slide-number: true
   show-slide-number: all
   transition: fade
   progress: true
   multiplex: false
   scrollable: false
   preview-links: false
   hide-inactive-cursor: true
   highlight-style: printing
   pause: true
---
     
```{r}
#| eval: true
#| echo: false
library(pacman)
p_load(broom, latex2exp, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr, parallel,gtools)

theme_empty <- theme_bw() + theme(
  line = element_blank(),
  rect = element_blank(),
  strip.text = element_blank(),
  axis.text = element_blank(),
  plot.title = element_blank(),
  axis.title = element_blank(),
  plot.margin = structure(c(0, 0, 0, 0), unit = "lines", valid.unit = 3L, class = "unit"),
  legend.position = "none"
)


# Set population and sample sizes
n_p <- 100
n_s <- 30
# Set the seed
set.seed(12469)
# Generate data
pop_df <- tibble(
  i = 3,
  x = rnorm(n_p, mean = 10, sd = 3.5),
  e = rnorm(n_p, mean = 0, sd = 1),
  y = i + 0.5 * x + e,
  row = rep(1:sqrt(n_p), times = sqrt(n_p)),
  col = rep(1:sqrt(n_p), each = sqrt(n_p)),
  s1 = sample(x = c(rep(T, n_s), rep(F, n_p - n_s))),
  s2 = sample(x = c(rep(T, n_s), rep(F, n_p - n_s))),
  s3 = sample(x = c(rep(T, n_s), rep(F, n_p - n_s)))
)

pop_mean <- as.numeric(round(pop_df |> summarize(mean=mean(x, na.rm = T)),1))

pop_sd <- as.numeric(round(pop_df |> summarize(sd=sd(x, na.rm = T)),1))

```


## Plan para hoy

1. [Datos categóricos](#intro)

2. [Intervalos de Confianza](#intconf)




# Datos categóricos {#intro}

## Población y Muestra {.medium}

- Los estadísticos descriptivos discutidos anteriormente describen una **muestra**, pero no a la **población**. 

- Las medidas que describen a una población se llaman `parámetros`. Utilizamos letras griegas para referirnos a ellos. 

::: {.tbl-classic .tbl-larger .center-text}


| Medida                | Parámetro poblacional  | Estadístico muestral |
|:----------------------|:----------------------:|:--------------------:|
| Media                 |       $\mu$            |    $\bar{x}$         |
| Varianza              |       $\sigma^2$       |    $S^2$             |
| Desviación Estándar   |       $\sigma$         |    $S$               |

:::

## ¿Por qué nos importa tanto la población vs la muestra? {.medium}

- La inferencia estadística es el acto de generalizar a partir de una muestra para sacar conclusiones sobre una población.

. . .

- Nos interesan los parámetros poblacionales, los cuales no observamos. En su lugar, debemos calcular estadísticas a partir de nuestra muestra para aprender sobre ellos.

$$
\bar{x} \xrightarrow{\text{🤞 ojalá 🤞}} \mu
$$

. . .


- Como parte de este proceso, debemos cuantificar el grado de incertidumbre en nuestra estadística muestral.



## ¿Por qué nos importa tanto la población vs la muestra? {.medium}

Para responder a esta pregunta, utilicemos el siguiente ejemplo:

- 100 estudiantes están tomando Analítica de los Negocios y la universidad quiere saber el número de horas de estudio de todo ellos. Asumamos que tenemos los datos para todos los estudiantes

. . .

- Luego tomemos muestras de 30 estudiantes y miremos cómo el número de horas de estudio varían entre ellas

## La distribución poblacional de horas de estudio {.medium}

::: columns
::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
ggplot(data = pop_df, aes(x = row, y = col)) +
  geom_point(color = "darkslategray", size = 10) +
  theme_empty
```
:::

::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
pop_df |>
ggplot(aes(x = x)) +
  geom_histogram(bins=15, fill="orange", color="darkred") +
    scale_x_continuous(limits = c(0, 20), breaks = c(0, 5, 10, 15, 20)) +
    scale_y_continuous(limits = c(0, 10), breaks = c(2, 4, 6, 8,10)) +
  labs(x="Hours of Studying",
       y="Frequency") +
  theme_minimal() 
```

La media **poblacional** ($\mu$) es `r round(pop_df |> summarize(mean=mean(x, na.rm = T)),1)`

:::
:::



## Horas de estudio para la Muestra 1 {.medium}

::: columns
::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
ggplot(data = pop_df, aes(x = row, y = col, shape = s1)) +
  geom_point(color = "darkslategray", size = 10) +
  scale_shape_manual(values = c(1, 19)) +
  theme_empty
```
:::

::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
pop_df |>
  filter(s1 == T) |>
ggplot(aes(x = x)) +
  geom_histogram(bins=15, fill="orange", color="darkred") +
    scale_x_continuous(limits = c(0, 20), breaks = c(0, 5, 10, 15, 20)) +
    scale_y_continuous(limits = c(0, 10), breaks = c(2, 4, 6, 8,10)) +
  labs(x="Hours of Studying",
       y="Frequency") +
  theme_minimal() 
```

La media **muestral** es `r round(pop_df |> filter(s1 == T) |> summarize(mean=mean(x, na.rm = T)),1)`

:::
:::


## Horas de estudio para la Muestra 2 {.medium}

::: columns
::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
ggplot(data = pop_df, aes(x = row, y = col, shape = s2)) +
  geom_point(color = "darkslategray", size = 10) +
  scale_shape_manual(values = c(1, 19)) +
  theme_empty
```
:::

::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
pop_df |>
  filter(s2 == T) |>
ggplot(aes(x = x)) +
  geom_histogram(bins=15, fill="orange", color="darkred") +
    scale_x_continuous(limits = c(0, 20), breaks = c(0, 5, 10, 15, 20)) +
      scale_y_continuous(limits = c(0, 10), breaks = c(2, 4, 6, 8,10)) +
  labs(x="Hours of Studying",
       y="Frequency") +
  theme_minimal() 
```

La media **muestral** es `r round(pop_df |> filter(s2 == T) |> summarize(mean=mean(x, na.rm = T)),1)`

:::
:::


## Horas de estudio para la Muestra 3 {.medium}

::: columns
::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
ggplot(data = pop_df, aes(x = row, y = col, shape = s3)) +
  geom_point(color = "darkslategray", size = 10) +
  scale_shape_manual(values = c(1, 19)) +
  theme_empty
```
:::

::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
pop_df |>
  filter(s3 == T) |>
ggplot(aes(x = x)) +
  geom_histogram(bins=15, fill="orange", color="darkred") +
    scale_x_continuous(limits = c(0, 20), breaks = c(0, 5, 10, 15, 20)) +
      scale_y_continuous(limits = c(0, 10), breaks = c(2, 4, 6, 8,10)) +
  labs(x="Hours of Studying",
       y="Frequency") +
  theme_minimal() 
```

La media **muestral** es `r round(pop_df |> filter(s3 == T) |> summarize(mean=mean(x, na.rm = T)),1)`

:::
:::


## ¿Por qué nos importa tanto la población vs la muestra? {.medium}

- Como vimos en los anteriores ejemplos, algunas muestras pueden estar lejos del valor real del parámetro poblacional (el número de horas de estudio promedio para todos los estudiantes tomando Analítica).

- Diferencias entre muestras individuales y la población llevan a la **incertidumbre** para el que está analizando el problema

. . .

### ¿Por qué nos importa tanto la población vs la muestra?

**Respuesta:** la incertidumbre importa!

Cuando tomamos una muestra, no sabemos si esta es una *buena* muestra ($\bar{x}$ está cerca a $\mu$) o una *mala* ($\bar{x}$ difiere mucho de $\mu$).


## Distribución Muestral de la Media {.medium}

Para entender cómo varían las medias muestrales de tamaño $n=30$ de nuestro ejemplo, tomemos 10 muestras y grafiquemos el histograma...


## Distribución Muestral de la Media para 10 muestras {.medium}

::: columns
::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
n_samples <- 10 # Number of samples to draw
sample_means <- replicate(n_samples, {
  sample_indices <- sample(1:n_p, n_s, replace = FALSE) # Random sample
  mean(pop_df$x[sample_indices]) # Calculate mean
})

# Visualize the sampling distribution
tibble(mean = sample_means) |>
  ggplot(aes(x = mean)) +
  geom_histogram(binwidth = 0.1, color = "darkblue", fill = "lightblue") +
geom_vline(xintercept = pop_mean, linetype = "dashed", color = "darkred", linewidth = 1.2) +
  scale_x_continuous(limits = c(7, 12), breaks = c(7, 8,9, 10,11, 12)) +
  labs(title = "Sampling Distribution of the Mean (Approximation)",
       x = "Sample Mean",
       y = "Frequency") +
  theme_minimal()
```
:::

::: {.column width="50%"}

Así luce la distribución de las medias muestrales para 10 muestras. 


::: {.fragment}
Sin embargo, no se pueden sacar muchas conclusiones con base en el gráfico. 
:::

:::
:::





## Distribución Muestral de la Media para 100 muestras {.medium}

::: columns
::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
n_samples <- 100 # Number of samples to draw
sample_means <- replicate(n_samples, {
  sample_indices <- sample(1:n_p, n_s, replace = FALSE) # Random sample
  mean(pop_df$x[sample_indices]) # Calculate mean
})

# Visualize the sampling distribution
tibble(mean = sample_means) |>
  ggplot(aes(x = mean)) +
  geom_histogram(binwidth = 0.1, color = "darkblue", fill = "lightblue") +
  geom_vline(xintercept = pop_mean, linetype = "dashed", color = "darkred", linewidth = 1.2) +
        scale_x_continuous(limits = c(7, 12), breaks = c(7, 8,9, 10,11, 12)) +
  labs(title = "Sampling Distribution of the Mean (Approximation)",
       x = "Sample Mean",
       y = "Frequency") +
  theme_minimal()
```
:::

::: {.column width="50%"}

¿Qué pasa si tomamos 100 muestras? 


::: {.fragment}
🤔 Hmmm cierta forma ya conocida empieza a emerger...
:::


:::
:::



## Distribución Muestral de la Media para 1000 muestras {.medium}

::: columns
::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
n_samples <- 1000 # Number of samples to draw
sample_means <- replicate(n_samples, {
  sample_indices <- sample(1:n_p, n_s, replace = FALSE) # Random sample
  mean(pop_df$x[sample_indices]) # Calculate mean
})

# Visualize the sampling distribution
tibble(mean = sample_means) |>
  ggplot(aes(x = mean)) +
  geom_histogram(binwidth = 0.1, color = "darkblue", fill = "lightblue") +
    geom_vline(xintercept = pop_mean, linetype = "dashed", color = "darkred", linewidth = 1.2) +
        scale_x_continuous(limits = c(7, 12), breaks = c(7, 8,9, 10,11, 12)) +
  labs(title = "Sampling Distribution of the Mean (Approximation)",
       x = "Sample Mean",
       y = "Frequency") +
  theme_minimal()
```
:::

::: {.column width="50%"}

¿Qué pasa si tomamos 1000 muestras?


::: {.fragment}
Ya es claro que la distribución tiende a ser normal...
:::

:::
:::


## Distribución Muestral de la Media para 10000 muestras {.medium}

::: columns
::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
n_samples <- 10000 # Number of samples to draw
sample_means <- replicate(n_samples, {
  sample_indices <- sample(1:n_p, n_s, replace = FALSE) # Random sample
  mean(pop_df$x[sample_indices]) # Calculate mean
})

# Visualize the sampling distribution
tibble(mean = sample_means) |>
  ggplot(aes(x = mean)) +
  geom_histogram(binwidth = 0.1, color = "darkblue", fill = "lightblue") +
    geom_vline(xintercept = pop_mean, linetype = "dashed", color = "darkred", linewidth = 1.2) +
        scale_x_continuous(limits = c(7, 12), breaks = c(7, 8,9, 10,11, 12)) +
  labs(title = "Sampling Distribution of the Mean (Approximation)",
       x = "Sample Mean",
       y = "Frequency") +
  theme_minimal()
```
:::

::: {.column width="50%"}

¿Qué pasa si tomamos 10000 muestras?

::: {.fragment}
...y que la media de la distribución de medias muestrales se ubica muy cerca de la media poblacional (la línea punteada)
:::

:::
:::




## Distribución Muestral de la Media con un n mayor {.medium}

::: columns
::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
n_samples <- 10000 # Number of samples to draw
n_s2 <- 50
sample_means <- replicate(n_samples, {
  sample_indices <- sample(1:n_p, n_s2, replace = FALSE) # Random sample
  mean(pop_df$x[sample_indices]) # Calculate mean
})

# Visualize the sampling distribution
tibble(mean = sample_means) |>
  ggplot(aes(x = mean)) +
  geom_histogram(binwidth = 0.1, color = "darkblue", fill = "lightblue") +
    geom_vline(xintercept = pop_mean, linetype = "dashed", color = "darkred", linewidth = 1.2) +
        scale_x_continuous(limits = c(7, 12), breaks = c(7, 8,9, 10,11, 12)) +
  labs(title = "Sampling Distribution of the Mean (Approximation)",
       x = "Sample Mean",
       y = "Frequency") +
  theme_minimal()
```
:::

::: {.column width="50%"}

¿Qué pasa si tomamos 10000 muestras pero de 50 estudiantes?

::: {.fragment}
La variabilidad de las medias muestrales es menor. 
:::

:::
:::


## Distribución Muestral de la Media con un n mayor {.medium}

::: columns
::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
n_samples <- 10000 # Number of samples to draw
n_s3 <- 70
sample_means <- replicate(n_samples, {
  sample_indices <- sample(1:n_p, n_s3, replace = FALSE) # Random sample
  mean(pop_df$x[sample_indices]) # Calculate mean
})

# Visualize the sampling distribution
tibble(mean = sample_means) |>
  ggplot(aes(x = mean)) +
  geom_histogram(binwidth = 0.1, color = "darkblue", fill = "lightblue") +
    geom_vline(xintercept = pop_mean, linetype = "dashed", color = "darkred", linewidth = 1.2) +
        scale_x_continuous(limits = c(7, 12), breaks = c(7, 8,9, 10,11, 12)) +
  labs(title = "Sampling Distribution of the Mean (Approximation)",
       x = "Sample Mean",
       y = "Frequency") +
  theme_minimal()
```
:::

::: {.column width="50%"}

¿Qué pasa si tomamos 10000 muestras pero de 70 estudiantes?

::: {.fragment}
A medida que el tamaño de la muestra $n$ es mayor, las muestras van a tener menos probabilidad de estar lejos del parámetro poblacional
:::


:::
:::


## ¿Qué podemos concluir de los histogramas anteriores? {.medium}

- La distribución muestral de la media muestral puede no ser normal cuando el tamaño de la muestra es pequeño, pero se vuelve más normal a medida que el tamaño de la muestra aumenta.

. . .

- La media muestral puede no ser igual a la media poblacional, pero su distribución se centra en la media poblacional.

. . .

- Con una muestra más grande, la variabilidad de la media muestral alrededor de la población disminuye.



## Teorema del Límite Central {.medium}

Para una población con una media bien definida $\mu$ y una desviación estándar $\sigma$ se cumplen estas tres propiedades para la distribución de la media muestral $\bar{x}$, siempre que se cumplan ciertas condiciones:

1. La media de la distribución muestral de la media es idéntica a la media poblacional $\mu$.

2. La desviación estándar de la distribución de las medias muestrales es $\dfrac{\sigma}{\sqrt{n}}$

Esto se llama el *error estándar* (SE) de la media.

3. Para un $n$ suficientemente grande, la forma de la distribución muestral de las medias es aproximadamente normal.

## Teorema del Límite Central {.medium}

Básicamente el teorema es:

$$\bar{x}\sim N(\mu,\dfrac{\sigma}{\sqrt{n}})$$
E identifica las tres caracterízticas básicas de una distribución:

1. Forma $\rightarrow$ Normal

2. Tendencia central $\rightarrow$ $\mu$

3. Dispersión $\rightarrow$ $\dfrac{\sigma}{\sqrt{n}}$

## Horas de Estudio y el TLC {.medium}


Volviendo al ejemplo de nuestros estudiantes, la media es `r round(pop_df |> summarize(mean=mean(x, na.rm = T)),1)` y la desviación estándar es `r round(pop_df |> summarize(sd=sd(x, na.rm = T)),1)`. Entonces la distribución muestral de $\bar{x}_{30}$ es aproximadamente:

$$\bar{x}_{30}\sim N(9.9,\dfrac{3.6}{\sqrt{30}})=N(9.9 , 0.65)$$

```{r}
#| echo: false
#| out-width: 100%
n_samples <- 1000 # Number of samples to draw
n_s <- 30
sample_means <- replicate(n_samples, {
  sample_indices <- sample(1:n_p, n_s, replace = FALSE) # Random sample
  mean(pop_df$x[sample_indices]) # Calculate mean
})
```

Dado que el TLC dice que la distribución de las medias muestrales es normal, podemos calcular probabilidades bajo la curva. Por ejemplo:

$$P(\bar{x}_{30}>10)=?$$


## Horas de Estudio y el TLC {.medium}

$$P(\bar{x}_{30}>10)\approx 0.43$$

```{r}
#| echo: true
#| out-width: 100%
pnorm(10, mean = 9.9, sd = 0.65, lower.tail=FALSE)
```

. . .

En nuestra simulación con las 1000 muestras simuladas de $\bar{x}$, ¿cuántas medias muestrales están por encima de 10?

```{r}
#| echo: true
#| out-width: 100%
sum(sample_means > 10)
```

Este número se acerca a la aproximación con el TLC, el cual establece que son aproximadamente 43% ($1000\times0.43\approx430$) de las medias muestrales.

## Condiciones para el TLC {.medium}

✅  `Independencia`: la muestra debe ser tomada aleatoriamente

- Si las muestras son independientes, por definición el valor de una muestra no debería "influenciar" los valores de otras muestras


## Condiciones para el TLC {.medium}

✅  `Tamaño de la muestra /Distribución`

- Si los datos son numéricos, usualmente $n\geq30$ es una muestra suficiente para que el TLC se aplique

- Si sabemos que los datos se distribuyen como una normal, la distribución de las medias muestrales también será normal, sin importar $n$



# Intervalos de Confianza {#intconf}

## Intervalos de Confianza {.medium}


::: {.columns}
::: {.column width=50%}
![](img/murky_lake.png){height="400"}
:::

::: {.column width=50%}

- Usar un estadístico muestral para estimar un parámetro es como pescar con una lanza en un lago fangoso

- Si tiramos la lanza donde creemos ver un pez, lo más probable es que fallemos

- Si reportamos una estimación puntual, lo más probable es que no le peguemos al parámetro poblacional

:::
:::


## Intervalos de Confianza {.medium}


::: {.columns}
::: {.column width=50%}
![](img/fisher.png){height="400"}
:::

::: {.column width=50%}

- Por otro lado, usar intervalos de confianza es como pescar con una red

- Si tiramos la red donde creemos ver un pez, tenemos una buena oportunidad de atraparlo

- Si reportamos un rango de valores plausibles, tenemos también una gran oportunidad de capturar al parámetro poblacional

:::
:::


## ¿Qué es un intervalo de confianza? {.medium}

Con un [intervalo de confianza]{.marker-hl} tomamos una estimación puntual de la muestra y, con el conocimiento que tenemos sobre las distribuciones muestrales, tratamos de acercarnos al parámetro muestral


## ¿Qué es un intervalo de confianza? {.medium}

::: {.columns}
::: {.column width=50%}
```{r}
#| fig.align: 'center'
#| echo: false
#| eval: true
# Define the x-axis range and normal distribution
x <- seq(-4, 4, length = 1000)
y <- dnorm(x)

# Create a data frame
df <- data.frame(x = x, y = y)

# Plot the normal distribution with highlighted regions
ggplot(df, aes(x = x, y = y)) +
  geom_area(aes(x = ifelse(x >= -1.96 & x <= 1.96, x, NA)), fill = "yellow", alpha = 0.5) +
  geom_area(aes(x = ifelse(x < -1.96, x, NA)), fill = "navy", alpha = 0.5) +
  geom_area(aes(x = ifelse(x > 1.96, x, NA)), fill = "navy", alpha = 0.5) +
  geom_line(color = "black", size = 1) +
  scale_x_continuous(breaks = c(-1.96, 0, 1.96),
                         labels = c(expression(mu - 1.96 * frac(sigma, sqrt(n))), expression(mu), expression(mu + 1.96 * frac(sigma, sqrt(n))))
) +
  labs(x = "", y= "") +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.text = element_text(size = 14),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank())

```
:::

::: {.column width=50%}

- EL TLC dice que $\bar{x}\sim N(\mu,\dfrac{\sigma}{\sqrt{n}})$

- Para una curva normal, 95% de su área está dentro de 1.96 SD con respecto al centro. 

- Eso significa que, para un 95% de las veces, $\bar{x}$ va a estar a $1.96 \times \dfrac{\sigma}{\sqrt{n}}$ de $\mu$

:::
:::

## ¿Qué es un intervalo de confianza? {.medium}

Por lo tanto, un intervalo de confianza de $\mu$ al 95% será:

$$\bar{x}\pm 1.96\times\dfrac{\sigma}{\sqrt{n}}=\Big[\bar{x}- 1.96\times\dfrac{\sigma}{\sqrt{n}},\bar{x}+1.96\times\dfrac{\sigma}{\sqrt{n}}\Big]$$


```{r}
#| fig.align: 'center'
#| echo: false
#| eval: true


# Plot the normal distribution with highlighted regions
ggplot(df, aes(x = x, y = y)) +
  geom_area(aes(x = ifelse(x >= -1.96 & x <= 1.96, x, NA)), fill = "yellow", alpha = 0.5) +
  geom_area(aes(x = ifelse(x < -1.96, x, NA)), fill = "navy", alpha = 0.5) +
  geom_area(aes(x = ifelse(x > 1.96, x, NA)), fill = "navy", alpha = 0.5) +
  geom_line(color = "black", size = 1) +
  scale_x_continuous(breaks = c(-1.96, 0, 1.96),
                         labels = c(expression(mu - 1.96 * frac(sigma, sqrt(n))), expression(mu), expression(mu + 1.96 * frac(sigma, sqrt(n))))
) +
  labs(x = "", y= "") +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.text = element_text(size = 14),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank())

```


## Procedimientos para encontrar un IC al 95% {.medium}

1. Tomen una muestra aleatoria de tamaño $n$ y calculen la media muestral $\bar{x}$

2. Si $n$ es grande, el intervalo de confianza a un 95% de $\mu$ será: 

$$\bar{x}\pm 1.96\times\dfrac{\sigma}{\sqrt{n}}$$

. . .

El problema radica en que ${\color{orange} \sigma}$ usualmente es desconocida para nosotros...


## Los parámetros poblacionales son desconocidos... {.medium}

Cuando la desviación estándar poblacional $\sigma$ es desconocida, la reemplazamos con la mejor aproximación que tenemos - la desviación estándar muestral ${\color{orange} s}$.

Así, un aproximado al intervalo de confianza a un 95% para $\mu$ es:

$$\bar{x}\pm 1.96\times\dfrac{{\color{orange} s}}{\sqrt{n}}$$

. . .

- Sin embargo, este reemplazo es peligroso:

    - ${\color{orange} s}$ es una estimación pobre de $\sigma$ si $n$ es pequeño
    - ${\color{orange} s}$ es bastante sensible a datos atípicos



## Ejemplo: Expectativa de Vida en 2007 {.medium}

Primero, tomemos la población de países en 2007:

```{r}
#| echo: true
#| out-width: 100%
library(gapminder)
library(tidyverse)
gapminder_2007 <- gapminder |>
  filter(year==2007)
```

. . . 

¿Cuál es la expectativa de vida promedio ese año? (Media poblacional)

```{r}
#| echo: true
#| out-width: 100%

pop_mean <- mean(gapminder_2007$lifeExp, na.rm = TRUE)
pop_mean
```


## Ejemplo: Expectativa de Vida en 2007 {.medium}

Seleccionemos una muestra de 30 países de manera aleatoria y calculemos los estadísticos muestrales:

```{r}
#| fig.align: 'center'
#| echo: true
#| eval: true

# Establecer una semilla garantiza que la muestra va a ser la misma
set.seed(1)
# Tomamos una muestra de 30 países
sample_gapminder <- gapminder_2007 |>
  sample_n(30)
# Calculamos la media muestral
sample_mean <- mean(sample_gapminder$lifeExp, na.rm = TRUE)
sample_mean

# Calculamos el error estándar
std_error <- sd(sample_gapminder$lifeExp, na.rm = TRUE) / sqrt(nrow(sample_gapminder))
std_error

```

$$\bar{x}=70.16 \quad \dfrac{s}{\sqrt{n}}=1.81$$


## Ejemplo: Expectativa de Vida en 2007 {.medium}

```{r}
#| fig.align: 'center'
#| echo: true
#| eval: true


# Calculamos los intervalos de confianza
ic_inf <- sample_mean - 1.96 * std_error
ic_sup <- sample_mean + 1.96 * std_error

# Definámoslo como intervalo
ic <- c(ic_inf, ic_sup)
ic
```


$$
\begin{array}{cl}
\bar{x}\pm 1.96\times\dfrac{s}{\sqrt{n}} &=& 70.16\pm 1.96\times 1.81  \\  
&\sim& 70.16 \pm 3.54 = (66.61, 73.71) \\  
\end{array}
$$

## Ejemplo: Expectativa de Vida en 2007 {.medium}

Otra manera de calcular el intervalo de confianza es con la función `t.test()`:


```{r}
#| fig.align: 'center'
#| echo: true
#| eval: true
result <- t.test(sample_gapminder$lifeExp, conf.level = 0.95)
result

# Extraemos los intervalos
ic_2 <- result$conf.int
ic_2
```


## ¿Qué significa "nivel de confianza al 95%"? {.medium}


### ¿Qué es lo que tiene un 95% de probabilidad de ocurrir?

- Es el procedimiento para construir el intervalo del 95%

- Aproximadamente el 95% de los intervalos construidos siguiendo el procedimiento explicado anteriormente cubrirán el verdadero valor de la media poblacional $\mu$
  
- Después de tomar la muestra y construir un intervalo, el intervalo construido cubre $\mu$ o no lo cubre. No lo sabemos. Solo Dios lo sabe.
  
- Es como la lotería: antes de elegir los números y comprar un boleto, tenemos alguna probabilidad de ganar el premio. Después de obtener el boleto, o ganamos o perdemos
  

## Simulación de Intervalos de Confianza del 95% para 100 muestras {.medium}

```{r}
#| fig.align: 'center'
#| echo: false
#| eval: true

# Set seed for reproducibility
set.seed(1)

# Number of samples
n_samples <- 100

# Population mean (assumed or known)
pop_mean <- mean(gapminder_2007$lifeExp, na.rm = TRUE)

# Function to compute confidence interval
compute_ci <- function(sampled_data) {
  result <- t.test(sampled_data$lifeExp, conf.level = 0.95)
  ci <- result$conf.int
  return(ci)
}

# Generate 100 confidence intervals
ci_list <- replicate(n_samples, compute_ci(sample_n(gapminder_2007, 30)), simplify = FALSE)

# Create a data frame for plotting
ci_df <- do.call(rbind, lapply(1:n_samples, function(i) {
  data.frame(
    lower = ci_list[[i]][1],
    upper = ci_list[[i]][2],
    include_mean = ci_list[[i]][1] <= pop_mean & ci_list[[i]][2] >= pop_mean,
    sample = i
  )
}))

# Plot the confidence intervals

ggplot(ci_df, aes(x = sample, ymin = lower, ymax = upper, color = include_mean)) +
  geom_linerange(size = 1) +
  geom_hline(aes(yintercept = pop_mean, linetype = "Media Poblacional"), 
             color = "navy", size = 1) +
  scale_color_manual(values = c("#FFBF00", "#365E32"), labels = c("No", "Si")) +
  scale_linetype_manual(name = "", values = c("Media Poblacional" = "dashed")) +
  labs(title = "100 Intervalos de Confianza para la Expectativa de Vida promedio",
       x = "Muestra",
       y = "Expectativa de Vida",
       color = "Incluye la Media Poblacional") +
  ylim(50, 80) +  # Set y-axis limits
  theme_minimal()

```



## IC a otros niveles de confianza {.medium}

Para un nivel de confianza $(1-\alpha)$, queremos encontrar el $z^*$ tal que:


::: {.columns}
::: {.column width=45%}

$$P(-z^*<Z<z^*)=1-\alpha$$

:::

::: {.column width=55%}

```{r}
#| fig.align: 'center'
#| echo: false
#| eval: true
# Define the x-axis range and normal distribution
x <- seq(-4, 4, length = 1000)
y <- dnorm(x)

# Create a data frame
df <- data.frame(x = x, y = y)

# Plot the normal distribution with highlighted regions
ggplot(df, aes(x = x, y = y)) +
  geom_area(aes(x = ifelse(x >= -1.96 & x <= 1.96, x, NA)), fill = "yellow", alpha = 0.5) +
  geom_area(aes(x = ifelse(x < -1.96, x, NA)), fill = "navy", alpha = 0.5) +
  geom_area(aes(x = ifelse(x > 1.96, x, NA)), fill = "navy", alpha = 0.5) +
  geom_line(color = "black", size = 1) +
  scale_x_continuous(
    breaks = c(-1.96, 1.96),
    labels = c(expression(Z^{"*"}), expression(Z^{"*"}))
  ) +
  labs(x = "", y = "") +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.text = element_text(size = 14),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  ) +
  # Add annotations
  annotate("text", x = 0, y = 0.15, label = expression(1 - alpha), size = 6) + # Inside yellow area
  annotate("text", x = -2.5, y = 0.05, label = expression(alpha/2), size = 6, color = "navy") + # Left navy area
  annotate("text", x = 2.5, y = 0.05, label = expression(alpha/2), size = 6, color = "navy")    # Right navy area
```

:::
:::


## IC a otros niveles de confianza {.medium}


En general, un intervalo de confianza al nivel $(1-\alpha)$ es 

  $$\bar{x}+z^*\times \dfrac{s}{\sqrt{n}}$$

- $z^*\times \dfrac{s}{\sqrt{n}}$ es conocido como el [margen de error]{.marker-hl}

- Los niveles de confianza más usados son:

  - 90% IC: $\alpha=0.1$, $z^*=1.64$ 
  - 95% IC: $\alpha=0.05$, $z^*=1.96$
  - 99% IC: $\alpha=0.01$, $z^*=2.58$



## IC con distintos niveles de confianza {.medium}

```{r}
#| fig.align: 'center'
#| echo: false
#| eval: true

# Calculate confidence intervals at different levels
result_95 <- t.test(sample_gapminder$lifeExp , conf.level = 0.95)
result_90 <- t.test(sample_gapminder$lifeExp , conf.level = 0.90)
result_99 <- t.test(sample_gapminder$lifeExp, conf.level = 0.99)

# Extract confidence intervals
ic_95 <- result_95$conf.int
ic_90 <- result_90$conf.int
ic_99 <- result_99$conf.int

# Combine the confidence intervals into a data frame
ci_df <- data.frame(
  Level = c("90%", "95%", "99%"),
  Lower = c(ic_90[1], ic_95[1], ic_99[1]),
  Upper = c(ic_90[2], ic_95[2], ic_99[2])
)


ggplot(ci_df, aes(x = Level, ymin = Lower, ymax = Upper)) +
  geom_linerange(size = 1.5, aes(color = Level)) +           # Plot confidence intervals
  geom_point(aes(y = Lower), size = 3) +                    # Add lower bound points
  geom_point(aes(y = Upper), size = 3) +                    # Add upper bound points
  geom_hline(aes(yintercept = pop_mean, linetype = "Media Poblacional"), 
             color = "black", size = 1) +                   # Add dashed line for population mean
  scale_linetype_manual(name = "", values = "dashed") +     # Customize dashed line in legend
  labs(title = "Intervalos de Confianza para la Expectativa de Vida promedio",
       x = "Nivel de Confianza",
       y = "Expectativa de Vida",
       color = "Nivel de Confianza") + 
  ylim(60, 80) +  # Set y-axis limits 
  theme_minimal() +
  theme(legend.position = "right")

```


## Simulación de Intervalos de Confianza del 90% para 100 muestras {.medium}

```{r}
#| fig.align: 'center'
#| echo: false
#| eval: true

# Set seed for reproducibility
set.seed(1)

# Number of samples
n_samples <- 100

# Population mean (assumed or known)
pop_mean <- mean(gapminder_2007$lifeExp, na.rm = TRUE)

# Function to compute confidence interval
compute_ci <- function(sampled_data) {
  result <- t.test(sampled_data$lifeExp, conf.level = 0.90)
  ci <- result$conf.int
  return(ci)
}

# Generate 100 confidence intervals
ci_list <- replicate(n_samples, compute_ci(sample_n(gapminder_2007, 30)), simplify = FALSE)

# Create a data frame for plotting
ci_df <- do.call(rbind, lapply(1:n_samples, function(i) {
  data.frame(
    lower = ci_list[[i]][1],
    upper = ci_list[[i]][2],
    include_mean = ci_list[[i]][1] <= pop_mean & ci_list[[i]][2] >= pop_mean,
    sample = i
  )
}))

# Plot the confidence intervals

ggplot(ci_df, aes(x = sample, ymin = lower, ymax = upper, color = include_mean)) +
  geom_linerange(size = 1) +
  geom_hline(aes(yintercept = pop_mean, linetype = "Media Poblacional"), 
             color = "navy", size = 1) +
  scale_color_manual(values = c("#FFBF00", "#365E32"), labels = c("No", "Si")) +
  scale_linetype_manual(name = "", values = c("Media Poblacional" = "dashed")) +
  labs(title = "100 Intervalos de Confianza para la Expectativa de Vida promedio",
       x = "Muestra",
       y = "Expectativa de Vida",
       color = "Incluye la Media Poblacional") +
  ylim(50, 80) +  # Set y-axis limits
  theme_minimal()

```

Menor Confianza, Mayor Riesgo de Error

## ¿Qué tan informativo es un IC? {.medium}

Pero... un intervalo demasiado amplio no dice mucho

![](img/garfield.jpg){height="400"}

