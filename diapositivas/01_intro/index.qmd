---
title: Analítica de Datos
author: Carlos Cardona Andrade
subtitle: Introducción
execute:
  freeze: auto
  echo: true
  fig-width: 6
  fig-height: 5
format:
  revealjs: 
   theme: ../slides.scss
   header-includes: |
      <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" rel="stylesheet"/>
   slide-number: true
   show-slide-number: all
   transition: fade
   progress: true
   multiplex: false
   scrollable: false
   preview-links: false
   hide-inactive-cursor: true
   highlight-style: printing
   pause: true
---
     
```{r}
#| eval: true
#| echo: false
library(knitr)
```

## Plan para hoy

1. [Sobre el curso](#curso)

2. [Intro a R](#introR)

3. [Todo en R es un objeto](#objeto)

4. [Todo en R tiene un nombre](#nombre)

5. [Todo se opera usando funciones](#funciones)

6. [Las funciones existen en paquetes](#paquetes)

7. [R y los datos](#Rdata)

# Sobre el curso {#curso}

## Información del curso {.medium}

[Sobre el curso]{.hl .hl-blue}

<i class="fa-solid fa-user icon"></i> Carlos Cardona Andrade

<i class="fa-solid fa-envelope icon"></i> [carlos.cardonaa@javeriana.edu.co](mailto:carlos.cardonaa@javeriana.edu.co)

<i class="fa-solid fa-globe icon"></i> [https://github.com/ccardonaandrade/analitica\_2025](https://github.com/ccardonaandrade/analitica\_2025){target="_blank"}

<i class="fa-solid fa-clock icon"></i> Lunes 4:10pm - 6:40pm

. . .

<br>

[Sobre ustedes]{.hl .hl-blue}

::: {.altlist style="font-size:1.8rem;text-align:left"}
- Nombre
- Hobbie/Algo que les guste mucho hacer
- Experiencia con lenguajes de programación
:::


## Evaluación {.medium}

<br>
<i class="fa-solid fa-home icon"></i> Quices y Talleres: 30\% [(La idea es que haya uno cada dos semanas)]{.grey600 style="font-size:1.5rem;"} 
<br>
<br>

. . .

<i class="fa-solid fa-file-pen icon"></i> 2 Parciales: 30\%
[(15% cada uno)]{.grey600 style="font-size:1.5rem;"}
<br>
<br>

. . .

<i class="fa-solid fa-person-chalkboard icon"></i>  Trabajo Final: 40\% [(Trabajo Escrito y Presentación)]{.grey600 style="font-size:1.5rem;"} 

## Motivación: Cómo John Snow mapeó el cólera

::: {.columns}
::: {.column width=60%}
![](img/cholera_large.jpg){height="450" style="border: 1px solid;"}
:::

::: {.column width=35%}
![](img/cholera_detail.png){height="450" style="border: 1px solid;"}
:::
:::

::: {.aside}
[John Snow, 1854]
:::

## Motivación: Cambio en la duración de las películas

![](img/movies_time.png){height="450" fig-align="center"}
  
::: {.aside}
Source: [El orden mundial](https://elordenmundial.com/mapas-y-graficos/peliculas-cada-vez-mas-largas/){target="_blank"}
:::


## Motivación: Estado de resultados de Apple


![](img/apple.png){height="450" fig-align="center"}



## Motivación: Storytelling with Data {.medium}

- [Out of Sight, Out of Mind (Pitch Interactive, 2013)](https://drones.pitchinteractive.com/){target="_blank"}

Pitch Interactive documentó todos los ataques con drones en Pakistán desde 2004, visualizando fecha, ubicación y víctimas.

- [An Alternative Data-driven Country Map (Nikita Rokotyan, 2019)](https://projects.interacta.io/country-tsne/){target="_blank"}

Una visualización simple pero impactante, creada con IA, que revela conexiones inéditas entre países.

- [Bezos' Wealth](https://mkorostoff.github.io/1-pixel-wealth/){target="_blank"}

Una historia interactiva que muestra la inmensidad de la riqueza de Bezos, permitiendo explorar su escala con desplazamiento.


## Motivación: Engañar con gráficos {.medium}

::: {.columns}
::: {.column .fragment}
![](img/accuracy1.jpeg){height="450" fig-align="center"}
:::
::: {.column .fragment}
![](img/accuracy2.jpg){height="450" fig-align="center"}
:::
:::

::: {.aside}
Source: [Patient](https://patient.info/news-and-features/whats-the-average-height-for-men){target="_blank"}
:::

## Motivación: Engañar con gráficos {.medium}


::: {.columns}
::: {.column width=50%}
![](img/trumptweet.png){height="450"}
:::
::: {.column width=50% .fragment}
<br>
![](img/voting-election.gif){style="border: 1px solid;"}
:::
:::

## Motivación: Desafíos en la Aplicación de la Analítica de Datos {.medium}

::: columns
::: {.column width="50%"}
Las empresas suelen subestimar los hallazgos de la analítica de datos debido a la resistencia cultural, la mala calidad de los datos y la falta de comunicación efectiva.
:::

::: {.column width="50%"}
![](img/datavsgut.png){height="450" fig-align="center"}

:::
:::

::: {.aside}
Source: [Why Insights from Data Analytics are Underestimated in Companies?](https://medium.com/@ytxia/why-insights-from-data-analytics-are-underestimated-in-companies-7f89d3aecf4a){target="_blank"}
:::


## Descripción del curso {.medium}

::: {.secfont style="font-size:2.3rem;text-align:center;"}
"Una imagen vale más que mil palabras"
:::

. . .

En este curso, los estudiantes aprenderán a trabajar con datos de manera efectiva frente a la incertidumbre, desarrollando habilidades para recolectar, analizar y utilizar datos con el propósito de realizar inferencias y conclusiones sobre fenómenos del mundo real. 

A lo largo del curso, se adquirirá experiencia práctica utilizando el software R, una herramienta fundamental para el análisis y visualización de datos.

## Objetivos de la clase {.medium}

::: {.fragment}
- ~~Volverse expertos en R~~
:::

::: {.fragment}
- Usar R para [resumir]{.hl .hl-blue}
 conjuntos de datos numérica y visualmente
:::

::: {.fragment}
- Ganar un entendimiento básico sobre los principios de [visualización de datos]{.hl .hl-blue}
:::

::: {.fragment}
- Aplicar [métodos de estimación]{.hl .hl-blue} y [pruebas estadísticas]{.hl .hl-blue} para analizar variables individuales o la relación entre dos variables con el fin de comprender fenómenos naturales y tomar decisiones basadas en datos
:::


# ¿Por qué R?

## ¿Por qué R? {.medium}

1. R es gratuito y de código abierto, lo que les ahorra dinero a ustedes y a la universidad 💰💵💰

2. Los empleadores del sector privado y público prefieren R sobre otros softwares como Stata 

3. R es muy flexible y adaptable a casi cualquier tarea, como limpieza de datos, machine learning, web scraping, etc

4. R no impone limitaciones en la cantidad de observaciones, variables, memoria o poder de procesamiento

5.  Yo 💖 R

## ¿Por qué R?

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("img/R_jobs.png")
```

## R + gráficos

```{r}
#| echo: false

library(tidyverse)
library(gapminder)
library(countrycode)
library(ggimage)
library(rnaturalearth)
library(rnaturalearthdata)

rm(gapminder)
# Damos un nombre a la base de datos "gapminder"
gapminder<-gapminder

gapminder<-filter(gapminder, year == max(year))
gapminder$iso2c<-tolower(countryname(gapminder$country, destination = 'iso2c'))

selected_countries <- gapminder %>%
  filter(country %in% c('United States', 'China', 'Colombia', 'Brazil','Nigeria',  'Finland', 'Iran', 'India'))

selected_countries$flag_url <- paste0("https://flagcdn.com/w40/", selected_countries$iso2c, ".png")   

```



```{r}
#| code-fold: true
#| code-summary: "código de la gráfica"
#| echo: true
#| fig-width: 10
#| fig-height: 4.5
ggplot(selected_countries, aes(x = reorder(country, lifeExp), y = lifeExp)) +
  geom_col(fill = "maroon", color = "black", width = 0.6) +
  geom_image(y = - 5, aes(x = country, y = lifeExp + 1, image = flag_url), size = 0.1) +  # Flags right above country names
  labs(title = "Life Expectancy for Selected Countries",
       subtitle = "Source: Gapminder, 2007",
       x = "Country",
       y = "Life Expectancy")+ coord_flip() +
  expand_limits(y = -5) +
  theme_minimal()
```


## R + gráficos

```{r}
#| code-fold: true
#| code-summary: "código de la gráfica"
#| echo: true
#| fig-width: 10
#| fig-height: 4.5


ggplot(gapminder, aes(x = continent, y = lifeExp)) +
geom_boxplot(fill = "lightblue", color = "black") +
geom_jitter(width = 0.2, size = 2, color = "maroon")+
labs(
title = "Life Expectancy by Continent",
subtitle = "Source: GAPMINDER, 2007",
x = "Continent",
y = "Life Expectancy"
) + theme_minimal()
```


## R + animaciones


```{r}
#| code-fold: true
#| code-summary: "código de la animación"
#| echo: true
#| fig-width: 10
#| fig-height: 4.5
#| fig-align: center
library(gganimate)
library(magick)

gapminder <- gapminder::gapminder

continents <- c("Europe", "Americas")
anim <-gapminder %>% 
  filter(continent %in% continents) %>%
  ggplot( aes(log(gdpPercap), lifeExp, col = continent)) +
  geom_point() + theme_minimal() +
  ggtitle("Life Expectancy versus Ferility: the Americas and Europe {frame_time}") + 
  transition_time(year)

animate(anim)

```

## R + mapas

```{r}
#| echo: false
world <- ne_countries(scale = "medium", returnclass = "sf")
# Rename the variable using rename()
gapminder <- gapminder::gapminder
gapminder<-filter(gapminder, year == max(year))
gapminder$iso2c<-tolower(countryname(gapminder$country, destination = 'iso2c'))
gapminder <- gapminder %>%
  mutate(iso2c = toupper(iso2c)) %>%
  rename(iso_a2 = iso2c)
join<-left_join(world,gapminder, by="iso_a2")
```


```{r}
#| code-fold: true
#| code-summary: "código del mapa"
#| echo: true
#| fig-width: 10
#| fig-height: 4.5
ggplot(data = join) +
  geom_sf(aes(fill = lifeExp)) +
  scale_fill_viridis_c(option = "plasma", trans = "sqrt")+
  labs(fill = "Life Expectancy",title = "Life Expectancy by Country",
       subtitle = "Source: GAPMINDER, 2007") + theme_bw() +  
  theme(panel.grid.major = element_blank(),
        panel.border = element_blank(),
        title =element_text(size=14),
        axis.ticks.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.x = element_blank(),
        axis.text.x = element_blank(),
        legend.background = element_rect(fill = "white"),
        legend.title=element_text(size=10),
        legend.key = element_rect( fill = "white"),
        legend.position = c(0.15, 0.45),
        legend.key.size = unit(0.6, 'cm'),
        legend.text=element_text(size=10),
        legend.spacing.y = unit(0.1, "cm")) 
```


## R + mapas

```{r}
#| code-fold: true
#| code-summary: "código del mapa"
#| echo: true
#| fig-width: 10
#| fig-height: 4.5
library(leaflet)
leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-74.06454, lat=4.63006, popup="Universidad Javeriana")
```


# Intro a R {#introR}


## R y R Studio {.smaller}


::: columns
::: {.column width="50%"}
![](img/r-logo.png){fig-alt="R logo" fig-align="center"}

- <i class="fa-brands fa-r-project"></i> es un **lenguaje de programación** de código abierto
- <i class="fa-brands fa-r-project"></i> también es un entorno para análisis estadístico y visualización de datos
- Es fácilmente extensible con *paquetes*
:::

::: {.column .fragment width="50%"}
![](img/rstudio-logo.png){fig-alt="RStudio logo"}

- R Studio es una interfaz conveniente para R llamada **IDE** (integrated development environment), e.g. *"I write R code in the R Studio IDE"*
- R Studio no es un requisito para programar con R, pero es muy utilizado por programadores de R y científicos de datos
:::
:::


## R vs. R Studio

[![](img/r_vs_rstudio.png){fig-alt="On the left: a car engine. On the right: a car dashboard. The engine is labelled R. The dashboard is labelled RStudio." fig-align="center" width="1001"}](https://moderndive.com/1-getting-started.html)

::: aside
Source: [Modern Dive](https://moderndive.com/1-getting-started.html){target="_blank"}.
:::


## Instalación y pasos a seguir {.medium}

1. Descargar [R](https://www.r-project.org/){target="_blank"}

2. Descargar [R Studio](https://www.rstudio.com/products/rstudio/download/preview/){target="_blank"}

3. ¿Tienen la versión más reciente de R?
```{r}
#| echo: true
  version$version.string
```


4. ¿Tienen la versión más reciente de R Studio? (La [versión previa](https://www.rstudio.com/products/rstudio/download/preview/) también sirve.)

```R
RStudio.Version()$version
# Requiere la versión interactiva pero debería mostrar algo como "[1] ‘2024.12.0.467’"
```

## Un tour por R Studio

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("img/rstudio_inicial.png")
```

## La Consola {.medium}


```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("img/consola.png")
```


::: {.altlist style="font-size:1.8rem;text-align:center"}
- <i class="fa-brands fa-r-project"></i> está esperando sus instrucciones
- Escriban algún código acá, opriman enter, y <i class="fa-brands fa-r-project"></i> ejecutará el código
:::



## La Consola {.medium}

Por ejemplo, escriban el siguiente código en la consola:

```{r}
#| echo: true
2+2
```

. . .

<i class="fa-brands fa-r-project"></i> posee una calculadora poderosa y reconoce todas las operaciones estándar de aritmética:

```{r}
#| echo: true
1+2 # Adición
6-7 # Resta
5/2 # División
2^3 # Exponencial
2+4*1^3 # Order estándar de precedencia (`*` antes de `+`, etc.)
```


## La Consola vs. R Script {.medium}

El problema de escribir código en la consola es que es efímero: una vez ejecutado, se pierde. Si quieren volver a usarlo, tienen que escribirlo de nuevo.

. . .

$\rightarrow$ Solución: Usar un R script (`.R`)

 - Permite guardar, editar y reutilizar el código fácilmente
 
 - Facilita la reproducibilidad y el trabajo en equipo
 
 - Se ejecuta línea por línea o en bloques con `Ctrl + Enter`


## R Script (Editor) {.medium}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("img/rscript_menu.png")
```


## R Script (Editor) {.medium}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("img/rscript_sample.png")
```

## R Script (Editor) {.medium}

- Uso de `#` para comentarios: Todo lo que sigue a `#` no se ejecuta.

- Importancia: Mejoran la legibilidad y facilitan la colaboración

- Buenas prácticas:
  - Sean claros y concisos
  - No comenten lo obvio
  - Usen varias líneas si es necesario
  
. . .

```{r}
#| eval: true
#| echo: true
# An example for coding:
x <- c(1,2,3) # This is a vector
mean(x) # Computing the mean for Table 1
```

. . .

Crear una [guía de estilo](http://adv-r.had.co.nz/Style.html){target="_blank"} para el código garantiza consistencia y facilita el trabajo en equipo. También es posible crear [plantillas](https://timfarewell.co.uk/my-r-script-header-template/){target="_blank"} para estandarizar aún más.

## R Script (Editor) {.medium}

Para mantener el código **organizado** y facilitar la calificación, es **obligatorio** seguir esta plantilla en sus R Scripts:

```{r}
#| eval: false
#| echo: true
## ------------------------------
## Taller 1
##
## Autor: Carlos Cardona Andrade
##
## Fecha: Enero 27 - 2025
## ------------------------------

## establecemos el directorio de trabajo:

setwd("C:/Users/ccardonaandrade/Google Drive/")    

## ---------------------------

## cargamos todos los paquetes que usaremos en la sesión:

library(tidyverse)
library(data.table)

## ---------------------------

### Ejercicio 1

### Ejercicio 2
```

## El interfaz completo de R Studio {.medium}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("img/rstudio_layout.png")
```


## Algunos fundamentos básicos de R {.medium} 

1. Todo es un objeto

2. Todo objeto tiene un nombre

3. Todo se opera usando funciones

4. Las funciones existen dentro de paquetes (i.e. "libraries"), aunque ustedes pueden escribir sus propias funciones

. . .

<br/>Puntos 1. y 2. pueden ser resumidos como un enfoque de [programación orientada a objetos](https://es.wikipedia.org/wiki/Programaci%C3%B3n_orientada_a_objetos){target="_blank"} (OOP). Esto puede sonar super abstracto ahora, pero veremos *muchos* ejemplos en las próximas semanas que harán todo más claro.


# Todo en R es un objeto {#objeto}

## La asignación de un objeto {.medium}

Los operadores `<-` y `=` asignan el resultado del lado derecho a una variable con el nombre en el lado izquierdo

```{r}
#| echo: true
a <- 5+5
a
```

. . .

### ¿Qué operador de asignación usar?
La mayoría de los usuarios de <i class="fa-brands fa-r-project"></i> (¿puristas?) parecen preferir `<-`, ya que `=` también tiene un papel específico en la evaluación dentro de las funciones.

**Nota:** un atajo para escribir el operador `<-` es `Alt` + `-`


## Tipos de Objetos en R {.medium}

- [Vectores]{.marker-hl}:
Usen `c()` (combinar/concatenar) para crearlos 
```{r}
#| eval: true
#| echo: true
my_numbers <- c(1, 2, 3, 1, 3, 5, 25)
countries <- c("Brasil", "India", "Colombia")
```

. . .

- `length()` para conocer la longitud de un vector

- `typeof()` para conocer el tipo de un vector

```{r}
#| eval: true
#| echo: true
length(my_numbers)
length(countries)
typeof(my_numbers)
typeof(countries)
```

## Tipos de Vectores/Variables en R {.medium}


<br>

::: {.tbl-classic .tbl-larger}


| **Tipo**       | **Descripción**       | **Ejemplo**                                         |
|----------------|-----------------------|-----------------------------------------------------|
| **Integer**    | Números enteros       | `c(1, 2, 3, 4)`                                    |
| **Double**     | Números decimales     | `c(1, 2.4, 3.14, 4)`                               |
| **Character**  | Texto                 | `c("1", "blue", "fun", "monster")`                  |
| **Logical**    | Verdadero o falso     | `c(TRUE, FALSE, TRUE, FALSE)`                       |
| **Factor**     | Categoría             | `c("Strongly disagree", "Agree", "Neutral")`        |
: {tbl-colwidths="[15,25,60]"}
:::


## Subconjunto de Vectores {.medium}

- Se usan corchetes `[]` para acceder a elementos de un vector

- Diferentes formas de hacer un subconjunto:

  - Con un índice `x[2]` o un vector de índices `x[c(2, 5, 7)]`
  - Con un *vector lógico* de la misma longitud que `x`

- Los índices negativos eliminan elementos `x[-1]`

- Se permiten índices repetidos `x[c(2, 2)]`


## Subconjunto de Vectores: Ejemplo {.medium}

```{r}
#| echo: true
countries
countries[1]
countries[c(1, 3)]
countries[c(FALSE, TRUE, TRUE)]
countries[-c(1, 3)]
countries[-2]
countries[c(-1, -2)]
countries[c(1, 2, 1, 2)]
```

## R no tiene escalares {.medium}

¿Notaron el `[1]` que sigue apareciendo en todas partes?

```{r}
#| echo: true
2^8
```

. . .

`a` es un **vector**; `[1]` indica su primer (y único) elemento.

```{r}
#| echo: true
a <- 5+5
length(a)
```

. . .

Aquí, el primer elemento `[1]` es 30 y el vigesimosexto `[26]` es 55:


```{r}
#| echo: true
r <- 30:70 # shorthand for the vector c(30, 31, ..., 69, 70)
r
```


## 💪 Ejercicio 1 - (5 minutos) {.medium}

```{r}
#| eval: false
#| echo: true
countries <- c("Brasil", "India", "Colombia")
```

1. Usen el comando `countries[4]`. ¿Qué obtienen? ¿Por qué?

2. Quiero extraer el segundo y tercer elemento de `countries`, entonces use `countries[2,3]`. ¿Qué pasa? ¿Lo pueden arreglar?`

3. Seleccionen Brasil e India de dos maneras diferentes.


## Tipos de Objetos en R {.medium}

- [Matrices]{.marker-hl}:
Consiste en filas y columnas de números

```{r}
#| eval: true
#| echo: true
matrix <- matrix(1:9, nrow = 3, ncol = 3)
matrix
```

. . .

### Accediendo a elementos de una matriz

Misma idea que para los vectores pero en dos dimensiones: `[fila, columna]`


```{r}
#| eval: true
#| echo: true
matrix[3, 3]

matrix[1:2, 2:3]
```

## Accediendo a elementos de una matriz {.medium}
 
Espacio significa *todo* de esa dimensión 

```{r}
#| eval: true
#| echo: true
matrix
matrix[1,]
matrix[,3]
matrix[,c(FALSE, TRUE, FALSE)]
```



## Tipos de Objetos en R {.medium}

- [Data frame]{.marker-hl}:
Es una tabla rectangular con filas (observaciones) y columnas (variables).
Las columnas pueden tener diferentes clases (caracteres, números, etc.)

```{r}
#| eval: true
#| echo: true
d <- data.frame(x = 1:2, y = c("a", "b")) 
d
```

. . .


- Otro tipo de objeto que es importante es el [tibble](https://tibble.tidyverse.org/), el cual se asimila a un data frame pero con unas propiedades especiales

- Aprenderán la diferencia en la próxima clase




## Entorno de trabajo {.medium}

Los objetos se almacenan en el espacio de trabajo o [entorno]{.marker-hl}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("img/environment.png")
```


# Todo en R tiene un nombre {#nombre}

## Todo en R tiene un nombre {.medium}

- Los objetos tienen nombres que se usan para examinarlos, usarlos o modificarlos

- Los objetos con nombre incluyen: 

  - variables (como `x` o `y`)
  - vectores (`my_numbers`)
  - datos cargados (`my_data`)
  - y funciones

- En <i class="fa-brands fa-r-project"></i>, gran parte del trabajo consiste en crear, referirse y modificar objetos con nombre

. . .

- **Sensibilidad a mayúsculas y minúsculas**  

  `my_data` ≠ `My_data`
  

## Palabras reservadas {.medium}

Algunas palabras están reservadas y no pueden usarse como nombres de objetos. Algunos ejemplos:  

  - `FALSE`, `TRUE`, `NA`, `NaN`  
  - Palabras clave de programación: `for`, `else`, `function`, etc  
  - Funciones básicas: `q()`, `c()`, `mean()`, `pi`, etc
  - [Acá](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html){target="_blank"} encuentran todas las palabras reservadas

  

## Buenas prácticas para nombrar objetos {.medium}

- Sean concisos, consistentes e informativos  
- Usen minúsculas y separen palabras con guión bajo, como en el [ estilo tidyverse](https://style.tidyverse.org/syntax.html){target="_blank"} 
- Eviten espacios en los nombres de variables

```r
# Good
day_one
day_1

# Bad
DayOne
first_day_of_the_month
djm1
```
# Todo se opera usando funciones {#funciones}

## ¿Qué es una función? {.medium}

- Una [función]{.marker-hl} es un objeto que realiza acciones. Toma un objeto(s), los procesa, y devuelve objetos

```{r}
#| echo: true
mean(my_numbers)
```

. . .

- Las funciones usan [argumentos]{.marker-hl} para ejecutarse. Pueden ser datos (`my_numbers`) o instrucciones (`title = "Life Expectancy"`)  
  
. . .

- Pueden asignar el resultado de una función a un objeto:  
  
```{r}
#| echo: true
my_summary <- summary(my_numbers)
my_summary
```

## Ayuda en R {.medium}

- Para obtener más información sobre una función (con nombre) u objeto en <i class="fa-brands fa-r-project"></i>, consulten la documentación en `help`. Por ejemplo:

```{r}
#| eval: false
#| echo: true
help(plot)
```

. . . 

- O, simplemente, solo usen `?`, que, además, es el símbolo más comúnmente empleado:

```{r}
#| eval: false
#| echo: true
?plot 
```


# Las funciones existen dentro de paquetes {#paquetes}

## Base R y los paquetes  {.medium}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("img/packages-base.png")
```

## Base R y los paquetes  {.medium}

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("img/packages-packages.png")
```


## Los paquetes en R {.medium}


::: columns
::: {.column width="50%"}
```r
install.packages("name")
```

- Esta función descarga archivos a su computador

- El nombre del paquete debe ir entre comillas

- Hagan esto una vez por computador
:::

::: {.column .fragment width="50%"}
```r
library(name)
```

- Carga el paquete a su sesión

- El nombre del paquete **no** va en comillas

- Hagan esto una vez por sesión en R Studio
:::
:::

::: {.absolute bottom="10%" left="10%" width="800px" .textbox .fragment .fade-up style="font-size:1.7rem;padding:0.5rem 1rem;" .altlist}
Uno de los errores más comunes del curso pasado fue instalar el mismo paquete varias veces. ¡Solo se necesita una vez!
:::

## Los paquetes en R: Un ejemplo {.medium}

```{r}
#| echo: false
#| eval: true
# Unload the tidyverse namespace explicitly
unloadNamespace("ggimage")
unloadNamespace("gganimate")
unloadNamespace("ggplotify")
unloadNamespace("ggfun")
unloadNamespace("ggplot2")
unloadNamespace("tidyr")
unloadNamespace("dplyr")
unloadNamespace("tidyverse")
```


Si utilizo la función `ggplot` del paquete `tidyverse`, <i class="fa-brands fa-r-project"></i> no podrá ejecutar el código:

```{r}
#| eval: true
#| echo: true
#| error: true
df <- data.frame(value = my_numbers)

# Create a plot
ggplot(df, aes(x = value)) +
  geom_histogram(binwidth = 1,
                 fill = "lightblue",
                 color = "black") +
  labs(title = "Histogram",
       x = "Value",
       y = "Frequency")+
  theme_minimal()
```



## Los paquetes en R: Un ejemplo {.medium}

**Siempre** debo cargar los paquetes que voy a usar al inicio de la sesión.

::: columns
::: {.column width="50%"}
```{r}
#| eval: false
#| echo: true
#| fig-align: center
#| fig-pos: right
#| code-line-numbers: "1|1-11"

library(tidyverse)

# Create a plot
ggplot(df, aes(x = value)) +
  geom_histogram(binwidth = 1,
                 fill = "lightblue",
                 color = "black") +
  labs(title = "Histogram",
       x = "Value",
       y = "Frequency")+
  theme_minimal()
```
:::

::: {.column .fragment width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: center
#| fig-pos: right

library(tidyverse)

# Create a plot
ggplot(df, aes(x = value)) +
  geom_histogram(binwidth = 1,
                 fill = "lightblue",
                 color = "black") +
  labs(title = "Histogram",
       x = "Value",
       y = "Frequency")+
  theme_minimal()
```
:::
:::




## El Tidyverse {.medium}


::: columns
::: {.column width="50%"}
"El tidyverse es una colección de paquetes de R para ciencia de datos, unidos por una filosofía común de datos ordenados y una gramática consistente que facilita su uso conjunto."

[El tidyverse hace que la ciencia de datos sea más rápida, fácil y divertida.]{.hl .hl-blue}
:::

::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "80%"
knitr::include_graphics("img/tidyverse.png")
```
:::
:::


## El Tidyverse {.medium}

::: columns
::: {.column width="50%"}

Es mucho mejor executar esta línea:

```r
install.packages("tidyverse")
```
Que descargar múltiples paquetes así:

```r
install.packages("ggplot2")
install.packages("dplyr")
install.packages("tidyr")
install.packages("readr")
install.packages("purrr")
install.packages("tibble")
install.packages("stringr")
install.packages("forcats")
install.packages("lubridate")
```
:::

::: {.column .fragment width="50%"}

Aplica lo mismo para cuando vamos a cargar los paquetes.

```r
library(tidyverse)
```
Con `tidyverse`, tenemos todo lo que necesitamos listo al instante

```r
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(purrr)
library(tibble)
library(stringr)
library(forcats)
library(lubridate)
```
:::
:::


# R y los datos {#Rdata}

## Acceder a Datos en R {.medium}

1. La primera manera es utilizando conjuntos de datos disponibles en paquetes:
  - El conjunto de datos `gapminder` del paquete con el mismo nombre
  - Los datos `titanic` del paquete `socviz`


```{r}
#| echo: true
#| eval: false
install.packages("socviz")
library(socviz)
titanic
```
```{r}
#| echo: false
#| eval: true
library(socviz)
titanic
```



## Accediendo a los elementos de los datos {.medium}


Pueden acceder a las filas y columnas de varias maneras. Una es usar la notación de matrices para llamar una variable, recordando que `data.frame[fila,columna]`: 


```{r}
#| eval: true
#| echo: true
titanic[,4]
```

. . .

También para llamar observaciones particulares:


```{r}
#| eval: true
#| echo: true
titanic[2,2]
```

. . .

O conjuntos de observaciones particulares:

```{r}
#| eval: true
#| echo: true
titanic[1:3,2]
```


## Accediendo a los elementos de los datos {.medium}

Otra manera es usando el operador `$` que permite seleccionar una columna específica de un data frame por su nombre:


```{r}
#| eval: true
#| echo: true
titanic$percent
```

. . .

Se puede combinar la notación con `$` y la de matrices:

```{r}
#| eval: true
#| echo: true
titanic$sex[2]
```

. . .

<br>
<center>
[Les recomiendo usar esta. Es mucho más inuitiva]{.hl .hl-dred}
<center>


## 💪 Ejercicio 2 - (10 minutos) {.medium}

Supongamos que el data frame `sales` tiene la siguiente estructura:

```{r}
#| eval: true
#| echo: true
sales <- data.frame(product = c("A", "B", "C", "D", "E"),
                    price = c(10, 15, 8, 12, 20),
                    quantity = c(100, 150, 80, 120, 90))
sales
```

1. Obtengan la columna *precio* usando notación de matrices

2. Obtengan la cantidad de los producto B y C usando el operador `$`

3. Obtengan de dos maneras diferentes los nombres de los primeros 3 productos

4. ¿Cómo obtener el nombre y el precio de los 3 últimos productos?


## Viewer {.medium}

Darle click a un objeto en el entorno o usar la función `View()` abre una ventana interactiva mostrándonos los datos:

```{r}
#| eval: false
#| echo: true
data_titanic <- titanic
View(data_titanic)
```

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "50%"
knitr::include_graphics("img/titanic_viewer.png")
```



## Accediendo a datos en R {.medium}

2. La segunda manera es accediento a datos externos en otros formatos:
  - Importar y limpiar datos puede ser tedioso, pero es esencial para el análisis estadístico
  - `tidyverse` incluye paquetes para leer datos que vienen de otros formatos

## Importando datos a R {.medium}

::: {.tbl-classic .tbl-larger .center-text}


| Image                                      | Description                            | Code                                      |
|--------------------------------------------|----------------------------------------|-------------------------------------------|
| ![readr](img/readr.png){height=80px}       | Para trabajar con datos en texto plano              | `my_data <- read_csv("file.csv")`         |
| ![readxl](img/readxl.png){height=80px}     | Para trabajar con archivos en Excel                  | `my_data <- read_excel("file.xlsx")`     |
| ![haven](img/haven.png){height=80px}      | Para trabajar con archivos de Stata, SPSS, y SAS    | `my_data <- read_stata("file.dta")`      |
        |
: {tbl-colwidths="[10,40,50]"}
:::


## Eliminando objetos {.medium}

Usen `rm()` para eliminar un objeto o varios objetos de su entorno de trabajo

```{r}
rm(d, my_numbers, countries)
```

. . .

También pueden usar `rm(list = ls())` para eliminar todos los objetos de tu entorno de trabajo (excepto los paquetes), pero esto no es recomendable.

. . .

Es mejor simplemente iniciar una nueva sesión de <i class="fa-brands fa-r-project"></i>.


## Eliminando objetos {.medium}


También habrán notado que R Studio tiene botones prácticos para limpiar el entorno de trabajo y eliminar gráficos individuales. Solo busquen estos íconos en los paneles correspondientes:


![](img/broom.png){fig-align="center" width=200 height=80}

## 📌 Aprendiendo R

```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("img/tweet_R.png")
```

::: {.fragment .fade-in}
[El tuit es de 2017! Ahora también existe ChatGPT y demás IA websites]{.bubble .bubble-bottom-left .absolute top="40%" right="0%" style="--bubcol: var(--bubcol-red);max-width:350px;font-size:1.2rem;"}
:::

## 📌 Aprender R toma tiempo {.medium}

Es normal equivocarse al principio. Lo importante es [seguir practicando]{.hl .hl-dred}.

::::: {.columns}

:::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
knitr::include_graphics("img/jake_sucking.png")
```
::::

:::: {.column width="50%"}
```{r}
#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-cap: "<a href='https://www.nytimes.com/2017/04/28/opinion/its-great-to-suck-at-surfing.html'>Karen Rinaldi, (It's Great to) Suck at Something</a>"
knitr::include_graphics("img/newyorktimes.png")
```
::::

:::::

. . .

<center>
⚡ Pongan el esfuerzo necesarios y serán recompensados⚡ 
<center>


## 📌 El aprendizaje comienza aquí {.medium}

- Las clases son solo el punto de partida

- Desarrollen habilidades y confianza para aprender por su cuenta

- ¡Empiecen a leer desde ya! 📚

- Actividades recomendadas: 
    - [R for Data Science](https://r4ds.hadley.nz/intro){target="_blank"} Intro y Caps. 1-3

    - El curso de Datacamp [Intro to R for Finance](https://www.datacamp.com/courses/introduction-to-r-for-finance){target="_blank"}
