n = n()
)
# Function to calculate confidence interval
ci_prop <- function(p, n, conf.level = 0.95) {
if (n <= 0) return(list(lower = NA, upper = NA))  # Handle cases where n <= 0
if (p < 0 | p > 1) return(list(lower = NA, upper = NA))  # Handle invalid proportion values
se <- sqrt(p * (1 - p) / n)
z <- qnorm((1 + conf.level) / 2)
lower <- p - z * se
upper <- p + z * se
# Ensure lower and upper are within [0, 1]
lower <- max(lower, 0)
upper <- min(upper, 1)
return(list(lower = lower, upper = upper))
}
proportion_data <- proportion_data %>%
rowwise() %>%
mutate(
ci = list(ci_prop(women_proportion, n)),
ci_lower = ci$lower,
ci_upper = ci$upper
) %>%
ungroup()
# Plot the data with specified y-axis breaks and adjusted limits
ggplot(proportion_data, aes(x = group, y = women_proportion)) +
geom_point(size = 4, color = "#0074D9") +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2, color = "#FF4136") +
labs(
x = "Group",
y = "Proportion of Women",
title = "Proportion of Women with Confidence Intervals by Group"
) +
scale_y_continuous(
breaks = c(0, 0.10, 0.20, 0.30),
limits = c(0, 0.3)  # Extend limits to ensure all breaks are visible
) +
theme_minimal()
# Set seed for reproducibility
set.seed(1234)
# Number of individuals
n <- 1000
# Create a data frame with 1000 individuals
data <- data.frame(
id = 1:n,
gender = sample(c("Male", "Female"), size = n, replace = TRUE, prob = c(0.8, 0.2))
)
# Assign individuals to groups (control, treatment 1, treatment 2) randomly
data <- data %>%
mutate(
group = sample(c("Control", "Treatment 1", "Treatment 2"), size = n, replace = TRUE)
)
# Calculate the proportion of women in each group
proportion_data <- data %>%
group_by(group) %>%
summarise(
women_proportion = mean(gender == "Female"),
n = n()
)
# Function to calculate confidence interval
ci_prop <- function(p, n, conf.level = 0.95) {
if (n <= 0) return(list(lower = NA, upper = NA))  # Handle cases where n <= 0
if (p < 0 | p > 1) return(list(lower = NA, upper = NA))  # Handle invalid proportion values
se <- sqrt(p * (1 - p) / n)
z <- qnorm((1 + conf.level) / 2)
lower <- p - z * se
upper <- p + z * se
# Ensure lower and upper are within [0, 1]
lower <- max(lower, 0)
upper <- min(upper, 1)
return(list(lower = lower, upper = upper))
}
proportion_data <- proportion_data %>%
rowwise() %>%
mutate(
ci = list(ci_prop(women_proportion, n)),
ci_lower = ci$lower,
ci_upper = ci$upper
) %>%
ungroup()
# Plot the data with specified y-axis breaks and adjusted limits
ggplot(proportion_data, aes(x = group, y = women_proportion)) +
geom_point(size = 4, color = "#0074D9") +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2, color = "#FF4136") +
labs(
x = "Group",
y = "Proportion of Women",
title = "Proportion of Women with Confidence Intervals by Group"
) +
scale_y_continuous(
breaks = c(0, 0.10, 0.20, 0.30),
limits = c(0, 0.3)  # Extend limits to ensure all breaks are visible
) +
theme_minimal()
# Set seed for reproducibility
set.seed(123)
# Number of individuals
n <- 1000
# Create a data frame with 1000 individuals
data <- data.frame(
id = 1:n,
gender = sample(c("Male", "Female"), size = n, replace = TRUE, prob = c(0.8, 0.2))
)
# Assign individuals to groups (control, treatment 1, treatment 2) randomly
data <- data %>%
mutate(
group = sample(c("Control", "Treatment 1", "Treatment 2"), size = n, replace = TRUE)
)
# Calculate the proportion of women in each group
proportion_data <- data %>%
group_by(group) %>%
summarise(
women_proportion = mean(gender == "Female"),
n = n()
)
# Function to calculate confidence interval
ci_prop <- function(p, n, conf.level = 0.95) {
if (n <= 0) return(list(lower = NA, upper = NA))  # Handle cases where n <= 0
if (p < 0 | p > 1) return(list(lower = NA, upper = NA))  # Handle invalid proportion values
se <- sqrt(p * (1 - p) / n)
z <- qnorm((1 + conf.level) / 2)
lower <- p - z * se
upper <- p + z * se
# Ensure lower and upper are within [0, 1]
lower <- max(lower, 0)
upper <- min(upper, 1)
return(list(lower = lower, upper = upper))
}
proportion_data <- proportion_data %>%
rowwise() %>%
mutate(
ci = list(ci_prop(women_proportion, n)),
ci_lower = ci$lower,
ci_upper = ci$upper
) %>%
ungroup()
# Plot the data with specified y-axis breaks and adjusted limits
ggplot(proportion_data, aes(x = group, y = women_proportion)) +
geom_point(size = 4, color = "#0074D9") +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2, color = "#FF4136") +
labs(
x = "Group",
y = "Proportion of Women",
title = "Proportion of Women with Confidence Intervals by Group"
) +
scale_y_continuous(
breaks = c(0, 0.10, 0.20, 0.30),
limits = c(0, 0.3)  # Extend limits to ensure all breaks are visible
) +
theme_minimal()
aggregate(id ~ gender, data = data, FUN = length)
library(tidyverse)
library(readxl)
library(janitor)
setwd("C:/Users/ccard/Downloads")
data <- read_excel("KEL702-XLS-ENG.xls")
data <- read_excel("KEL702-XLS-ENG.xls", sheet = "Exhibit 1")
data <- data %>%
clean_names()
data <- data %>% rename(us_gross = total_u_s_gross)
data <- data %>% rename(non_us_gross = total_non_u_s_gross)
View(data)
glimpse(data)
ggplot(data=data, aes(x=opening_gross, y=opening_gross))+geom_point()
ggplot(data=data, aes(x=opening_gross, y=us_gross))+geom_point()
ggplot(data=data, aes(x=(opening_gross/1000000), y=(us_gross/1000000)))+geom_point()
ggplot(data = data, aes(x = (opening_gross / 1000000), y = (us_gross / 1000000))) +
geom_point() +
labs(
x = "Opening Gross (in millions)",
y = "US Total Gross (in millions)"
) +
theme_minimal()
ggplot(data = data, aes(x = (opening_gross / 1000000), y = (us_gross / 1000000))) +
geom_point() + geom_smooth() +
labs(
x = "Opening Gross (in millions)",
y = "US Total Gross (in millions)"
) +
theme_minimal()
ggplot(data = data, aes(x = (opening_gross / 1000000), y = (us_gross / 1000000))) +
geom_point() + geom_smooth(method="lm") +
labs(
x = "Opening Gross (in millions)",
y = "US Total Gross (in millions)"
) +
theme_minimal()
#| echo: true
#| eval: true
hollywood_model <- lm(us_gross ~ opening_gross, data=data)
tidy(hollywood_model, conf.int = TRUE)
3.12*100000000
3.12*100000000+5108220
ggplot(data = data, aes(x = (opening_gross / 1000000), y = (us_gross / 1000000))) +
geom_point() + geom_line() +
labs(
x = "Opening Gross (in millions)",
y = "US Total Gross (in millions)"
) +
theme_minimal()
ggplot(data = data, aes(x = (opening_gross / 1000000), y = (us_gross / 1000000))) +
geom_point() + geom_smooth(method="lm") +
labs(
x = "Opening Gross (in millions)",
y = "US Total Gross (in millions)"
) +
theme_minimal()
3.12*50000000
(3.12*50000000)+5108220
# Fit the linear model
model <- lm((us_gross / 1000000) ~ (opening_gross / 1000000), data = data)
# Predict the corresponding y value when x = 50
predicted_y <- predict(model, newdata = data.frame(opening_gross = 50 * 1000000))
# Plot
ggplot(data = data, aes(x = (opening_gross / 1000000), y = (us_gross / 1000000))) +
geom_point() +
geom_smooth(method = "lm") +
geom_vline(xintercept = 50, linetype = "dashed", color = "blue") +   # Dashed vertical line at x = 50
geom_hline(yintercept = predicted_y, linetype = "dashed", color = "blue") + # Dashed horizontal line at predicted y
geom_point(aes(x = 50, y = predicted_y), color = "red", size = 3) + # Point at (50, predicted_y)
labs(
x = "Opening Gross (in millions)",
y = "US Total Gross (in millions)"
) +
theme_minimal()
# Fit the linear model
model <- lm(us_gross ~ opening_gross, data = data)
# Predict the corresponding y value when x = 50
predicted_y <- predict(model, newdata = data.frame(opening_gross = 50 * 1000000))
# Plot
ggplot(data = data, aes(x = (opening_gross / 1000000), y = (us_gross / 1000000))) +
geom_point() +
geom_smooth(method = "lm") +
geom_vline(xintercept = 50, linetype = "dashed", color = "blue") +   # Dashed vertical line at x = 50
geom_hline(yintercept = predicted_y, linetype = "dashed", color = "blue") + # Dashed horizontal line at predicted y
geom_point(aes(x = 50, y = predicted_y), color = "red", size = 3) + # Point at (50, predicted_y)
labs(
x = "Opening Gross (in millions)",
y = "US Total Gross (in millions)"
) +
theme_minimal()
# Fit the linear model
model <- lm(us_gross ~ opening_gross, data = data)
# Predict the corresponding y value when x = 50
predicted_y <- predict(model, newdata = data.frame(opening_gross = 50 * 1000000))
# Plot
ggplot(data = data, aes(x = (opening_gross / 1000000), y = (us_gross / 1000000))) +
geom_point() +
geom_smooth(method = "lm") +
geom_vline(xintercept = 50, linetype = "dashed", color = "blue") +   # Dashed vertical line at x = 50
geom_hline(yintercept = predicted_y/1000000, linetype = "dashed", color = "blue") + # Dashed horizontal line at predicted y
geom_point(aes(x = 50, y = predicted_y), color = "red", size = 3) + # Point at (50, predicted_y)
labs(
x = "Opening Gross (in millions)",
y = "US Total Gross (in millions)"
) +
theme_minimal()
# Fit the linear model
model <- lm(us_gross ~ opening_gross, data = data)
# Predict the corresponding y value when x = 50
predicted_y <- predict(model, newdata = data.frame(opening_gross = 50 * 1000000))
# Plot
ggplot(data = data, aes(x = (opening_gross / 1000000), y = (us_gross / 1000000))) +
geom_point() +
geom_smooth(method = "lm") +
geom_vline(xintercept = 50, linetype = "dashed", color = "blue") +   # Dashed vertical line at x = 50
geom_hline(yintercept = predicted_y/1000000, linetype = "dashed", color = "blue") + # Dashed horizontal line at predicted y
geom_point(aes(x = 50, y = predicted_y/1000000), color = "red", size = 3) + # Point at (50, predicted_y)
labs(
x = "Opening Gross (in millions)",
y = "US Total Gross (in millions)"
) +
theme_minimal()
# Predict the corresponding y value when x = 80
predicted_y <- predict(model, newdata = data.frame(opening_gross = 80 * 1000000))
# Plot
ggplot(data = data, aes(x = (opening_gross / 1000000), y = (us_gross / 1000000))) +
geom_point() +
geom_smooth(method = "lm") +
geom_vline(xintercept = 80, linetype = "dashed", color = "blue") +   # Dashed vertical line at x = 80
geom_hline(yintercept = predicted_y/ 1000000, linetype = "dashed", color = "blue") + # Dashed horizontal line at predicted y
geom_point(aes(x = 80, y = predicted_y/ 1000000), color = "red", size = 3) + # Point at (80, predicted_y)
labs(
x = "Opening Gross (in millions)",
y = "US Total Gross (in millions)"
) +
ds
# Predict the corresponding y value when x = 80
predicted_y <- predict(model, newdata = data.frame(opening_gross = 80 * 1000000))
# Plot
ggplot(data = data, aes(x = (opening_gross / 1000000), y = (us_gross / 1000000))) +
geom_point() +
geom_smooth(method = "lm") +
geom_vline(xintercept = 80, linetype = "dashed", color = "blue") +   # Dashed vertical line at x = 80
geom_hline(yintercept = predicted_y/ 1000000, linetype = "dashed", color = "blue") + # Dashed horizontal line at predicted y
geom_point(aes(x = 80, y = predicted_y/ 1000000), color = "red", size = 3) + # Point at (80, predicted_y)
labs(
x = "Opening Gross (in millions)",
y = "US Total Gross (in millions)"
) + theme_minimal()
# Predict the corresponding y value when x = 80
predicted_y <- predict(model, newdata = data.frame(opening_gross = 80 * 1000000))
# Plot
ggplot(data = data, aes(x = (- / 1000000), y = (us
0.164/0.0758
pnorm(2.163588,0,1)
1-0.984752
0.0152*2
pnorm(-2.163588,0,1)
tidy(hollywood_model, conf.int = TRUE)[1,5]
library(broom)
tidy(hollywood_model, conf.int = TRUE)[1,5]
tidy(hollywood_model, conf.int = TRUE)[2,5]
format(tidy(hollywood_model, conf.int = TRUE)[2,5], scientific = FALSE)
summary(data$sequel)
hollywood_model <- lm(us_gross ~ opening_gross + budget + sequel, data=data)
tidy(hollywood_model)
install.packages("corrplot")
library(corrplot)
hollywood_gross <- select(.hollywood, "us_gross", "opening_gross")
hollywood_gross <- select(hollywood, "us_gross", "opening_gross")
hollywood_gross <- select(data=hollywood, "us_gross", "opening_gross")
hollywood_gross <- select(data=hollywood, us_gross, opening_gross)
hollywood <- data
hollywood_gross <- select(data=hollywood, us_gross, opening_gross)
View(hollywood)
hollywood_gross <- data %>% select( us_gross, opening_gross)
corrplot(cor(hollywood_gross ),
method = "number",
type = "upper" # show only upper side
)
hollywood_gross <- data %>% select( us_gross, opening_gross, non_us_gross, budget)
corrplot(cor(hollywood_gross ),
method = "number",
type = "upper" # show only upper side
)
corrplot(cor(data %>% select( us_gross, opening_gross, non_us_gross, budget) ),
method = "number",
type = "upper" # show only upper side
)
corrplot(cor(data %>% select( us_gross, opening_gross, non_us_gross, budget) ),
method = "number",
type = "upper" # show only upper side
)
install.packages("datasaurus")
install.packages("datasauRus")
library(datasauRus)
dino <- dino
dino <- datasauRus$dino
dino <- datasaurus_dozen$$dino
dino <- datasaurus_dozen$dino
dino <- as.data.frame(datasaurus_dozen$dino)
dino <- as.data.frame(datasaurus_dozen$dataset[1,])
dino <- datasaurus_dozen %>%
filter(dataset == "dino")
hlines <- datasaurus_dozen %>%
filter(dataset == "h_lines")
View(hlines)
ggplot(hlines, aes(x=x, y=y, colour="navy"))+
geom_point()
ggplot(hlines, aes(x=x, y=y, fill="navy"))+
geom_point()
ggplot(hlines, aes(x=x, y=y))+
geom_point()
ggplot(hlines, aes(x=x, y=y))+
geom_point() + theme_minimal()
setwd("C:/Users/ccard/OneDrive/Documentos/GitHub/analitica_2025/data/spotify")
spotify <- read.csv("spotify_data.csv")
glimpse(spotify)
#la media
mean(spotify$popularity)
#la mediana
median(spotify$popularity)
#desviación estandar
sd(spotify$popularity)
#rango intercuartilico
IQR(spotify$popularity)
### Ejercicio 2
media_pop <- mean(spotify$popularity, na.rm = TRUE)
mediana_pop <- median(spotify$popularity, na.rm = TRUE)
ggplot(spotify, aes(x = popularity)) +
geom_histogram(bins = 15, fill = "lightblue", color = "black") +
geom_vline(xintercept = media_pop, color = "red", linetype = "dashed", size = 1.2) +
geom_vline(xintercept = mediana_pop, color = "blue", linetype = "solid", size = 1.2) +
labs(x = "Popularidad",
y = "Frecuencia") +
theme_minimal()
library(tidyverse)
ggplot(spotify, aes(x = popularity)) +
geom_histogram(bins = 15, fill = "lightblue", color = "black") +
geom_vline(xintercept = media_pop, color = "red", linetype = "dashed", size = 1.2) +
geom_vline(xintercept = mediana_pop, color = "blue", linetype = "solid", size = 1.2) +
labs(x = "Popularidad",
y = "Frecuencia") +
theme_minimal()
### Ejercicio 4
ggplot(spotify) +
geom_boxplot(aes(x=explicit, y = popularity)) +
labs(x = "explicity",
y = "popularidad") +
theme_minimal()
ggplot(spotify, aes(x = danceability, y = energy)) +
geom_point(alpha = 0.5, color = "blue") +  # Puntos en color azul con transparencia
geom_smooth(method = "loess", color = "red", se = TRUE) +  # Línea de tendencia suavizada
labs(title = "Relación entre Danceability y Energy",
x = "Danceability",
y = "Energy") +
theme_minimal()
## Ejercicio 6: Selección del año con menos valores atípicos
## Visualizar histogramas por año
ggplot(spotify) +
geom_histogram(aes(x=popularity), bins = 30, fill = "blue", color = "black", alpha = 0.7) +
labs(x = "Popularity Score", y = "Frequency") +
facet_wrap(~ year) +
theme_minimal()
## Suponiendo que el año elegido es 2009 (Punto 6)
spotify_new <- spotify %>% filter(year == 2009)
## Ejercicio 7: Media y mediana por explicit en spotify_new
spotify_new %>%
group_by(explicit) %>%
summarise(
mean_popularity = mean(popularity, na.rm = TRUE),
median_popularity = median(popularity, na.rm = TRUE)
)
## Ejercicio 8: Gráfico de dispersión entre popularity y otra variable
ggplot(spotify_new, aes(x = popularity, y = loudness)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", color = "red") +
labs(title = "Relación entre Popularity y Loudness",
x = "Popularity",
y = "Loudness") +
theme_minimal()
## Ejercicio 9: Creación de la variable new_genre
spotify <- spotify |>
mutate(new_genre = case_when(
str_detect(genre, "latin") ~ "Latin",
str_detect(genre, "rock") ~ "Rock",
TRUE ~ "Other"
))
## Conteo por categoría
spotify |>
group_by(new_genre) |>
count()
## Diagrama de caja de danceability por new_genre
ggplot(spotify, aes(x = new_genre, y = danceability, fill = new_genre)) +
geom_boxplot() +
labs(title = "Danceability por Género",
x = "New Genre",
y = "Danceability") +
theme_minimal()
## Ejercicio 10: Creación de nuevas variables
spotify <- spotify |>
mutate(
duration_min = duration_ms / 60000,
song_length = case_when(
duration_min < 2.5 ~ "Short",
duration_min >= 2.5 & duration_min <= 4 ~ "Medium",
duration_min > 4 ~ "Long"
)
)
## Gráfico de barras de song_length
ggplot(spotify, aes(x = song_length, fill = song_length)) +
geom_bar() +
labs(title = "Distribución de la Duración de Canciones",
x = "Categoría de Duración",
y = "Cantidad de Canciones") +
theme_minimal()
## Ejercicio 8: Gráfico de dispersión entre popularity y otra variable
ggplot(spotify_new, aes(x = popularity, y = loudness)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", color = "red") +
labs(title = "Relación entre Popularity y Loudness",
x = "Popularity",
y = "Loudness") +
theme_minimal()
ggplot(spotify, aes(x = danceability, y = energy)) +
geom_point(alpha = 0.5, color = "blue") +  # Puntos en color azul con transparencia
geom_smooth(method = "loess", color = "red", se = TRUE) +  # Línea de tendencia suavizada
labs(title = "Relación entre Danceability y Energy",
x = "Danceability",
y = "Energy") +
theme_minimal()
## Ejercicio 6: Selección del año con menos valores atípicos
## Visualizar histogramas por año
ggplot(spotify) +
geom_histogram(aes(x=popularity), bins = 30, fill = "blue", color = "black", alpha = 0.7) +
labs(x = "Popularity Score", y = "Frequency") +
facet_wrap(~ year) +
theme_minimal()
## Suponiendo que el año elegido es 2009 (Punto 6)
spotify_new <- spotify %>% filter(year == 2009)
## Ejercicio 7: Media y mediana por explicit en spotify_new
spotify_new %>%
group_by(explicit) %>%
summarise(
mean_popularity = mean(popularity, na.rm = TRUE),
median_popularity = median(popularity, na.rm = TRUE)
)
ggplot(spotify) +
geom_boxplot(aes(x=popularity)) +
labs(x = "popularidad",
y = "Frecuencia") +
theme_minimal()
### Ejercicio 2
media_pop <- mean(spotify$popularity, na.rm = TRUE)
mediana_pop <- median(spotify$popularity, na.rm = TRUE)
ggplot(spotify, aes(x = popularity)) +
geom_histogram(bins = 15, fill = "lightblue", color = "black") +
geom_vline(xintercept = media_pop, color = "red", linetype = "dashed", size = 1.2) +
geom_vline(xintercept = mediana_pop, color = "blue", linetype = "solid", size = 1.2) +
labs(x = "Popularidad",
y = "Frecuencia") +
theme_minimal()
