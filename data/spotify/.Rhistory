y = "Energy")
ggplot(spotify) +
geom_histogram(aes(x=popularity)) +
labs(x = "Popularity Score", y = "Frequency") +
facet_wrap(~ year) +
theme_minimal()
ggplot(spotify) +
geom_histogram(aes(x=popularity)) +
labs(x = "Popularity Score", y = "Frequency") +
facet_wrap(~ year) +
theme_minimal()
spotify_new <- filter(spotify, year == 2015)
popularity_stats <- spotify_new %>%
group_by(explicit) %>%
summarise(
Media = mean(popularity, na.rm = TRUE),
Mediana = median(popularity, na.rm = TRUE)
)
print(popularity_stats)
ggplot(spotify_new, aes(x = popularity, y = loudness)) +
geom_point(color = "blue", alpha = 0.5) +  # Puntos en azul con transparencia
labs(title = "Gráfico de Dispersión: Popularity vs Loudness",
x = "Popularity",
y = "Loudness")
spotify <- spotify |>
mutate(new_genre = case_when(
str_detect(genre, "latin") ~ "Latin",
str_detect(genre, "rock") ~ "Rock",
TRUE ~ "Other"
))
spotify |>
group_by(new_genre) |>
count()
spotify$new_genre <- ifelse(grepl("latin", spotify$genre, ignore.case = TRUE), "Latin",
ifelse(grepl("rock", spotify$genre, ignore.case = TRUE), "Rock", "Other"))
table(spotify$new_genre)
boxplot(danceability ~ new_genre, data = spotify,
col = c("lightblue", "lightgreen", "lightcoral"),
main = "Diagrama de Caja de Danceability por New Genre",
xlab = "New Genre", ylab = "Danceability")
spotify <- spotify %>%
mutate(duration_min = duration_ms / 60000)
head(spotify$duration_min)
spotify$song_length <- ifelse(spotify$duration_min < 2.5, "Short",
ifelse(spotify$duration_min >= 2.5 & spotify$duration_min <= 4, "Medium", "Long"))
table(spotify$song_length)
song_length_counts <- table(spotify$song_length)
barplot(song_length_counts,
col = c("lightblue", "lightgreen", "lightcoral"),
main = "Cantidad de Canciones por Duración",
xlab = "Categoría de Duración (song_length)",
ylab = "Cantidad de Canciones")
spotify  <- read.csv("spotify_data.csv")
glimpse(spotify)
#
spotify |>
summarise(
mean_popularity = mean(popularity, na.rm = TRUE),
median_popularity = median(popularity, na.rm = TRUE),
sd_popularity = sd(popularity, na.rm = TRUE),
iqr_popularity = IQR(popularity, na.rm = TRUE)
)
#La media (59.87) y la mediana (65.5) indican una popularidad moderadamente alta, aunque
#con cierta asimetría. La desviación estándar (21.34) muestra una dispersión considerable,
#y el IQR (17) sugiere que la mayoría de las canciones tienen popularidades entre valores
#relativamente cercanos.
#---------------------------------
#ejercicio 2
ggplot(spotify, aes(x = popularity)) +
geom_histogram(fill = "lightblue", color = "darkblue") +
geom_vline(aes(xintercept = mean(popularity)), color = "red", linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = median(popularity)), color = "green", linetype = "dashed", size = 1) +
labs(title = "Distribución de la Popularidad en Spotify",
x = "Popularidad",
y = "Frecuencia") +
theme_minimal()
#La popularidad es asimétrica a la izquierda, con muchas canciones poco populares.
#La media (roja) es menor que la mediana (verde), indicando sesgo negativo.
#--------------------------------
#ejercicio 3
ggplot(spotify) +
geom_boxplot(aes(y=popularity)) +
theme_minimal()
#se puede ver que los puntos de abajo muestran que tienen una popularidad muy baja.Siendo
#estos los valores atipicos en el grafico
#--------------------------------
#ejercicio 4
ggplot(spotify) +
geom_boxplot(aes(x=popularity , y=explicit)) +
labs(title = "popularidad de canciones explicitas vs no explicitas",
x = "popularidad",
y = "explicito") +
theme_minimal()
###
# De hecho sí, la mediana es mayor para las explícitas que para las que no lo son
###
#-------------------------------
#ejercicio 5
ggplot(spotify, aes(x = danceability, y = energy)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red", linetype = "dashed") +
labs(title = "Relación entre Bailabilidad y Energía",
x = "Danceability",
y = "Energy") +
theme_minimal()
###
# El análisis?
###
#------------------------------
#ejercicio 6
ggplot(spotify) +
geom_histogram(aes(x=popularity)) +
labs(x = "Popularity Score", y = "Frequency") +
facet_wrap(~ year) +
theme_minimal()
spotify_new <- spotify |>
filter(year == 2018)
glimpse(spotify_new)
#------------------------------
#ejercicio 7
spotify_new |>
group_by(explicit)|>
summarise(
mean_popularity = mean(popularity),
median_popularity = median(popularity)
)
#Aun que en el punto 4 no habian numeros claros, pero pudimos obervas que en ese punto decia
#que las canciones explícitas son ligeramente más populares. Ahora en este podemos decir , que
#pasa lo mismo que en punto 4.
#-----------------------------
#ejercicio 8
ggplot(spotify_new)+
geom_point(aes(x=(popularity), y=acousticness)) +
labs(x = "(popularity)",
y = "acousticness") +
theme_minimal()
#-----------------------------
#ejercicio 9
spotify <- spotify |>
mutate(new_genre = case_when(
str_detect(genre, "latin") ~ "Latin",
str_detect(genre, "rock") ~ "Rock",
TRUE ~ "Other"
))
spotify |>
group_by(new_genre) |>
count()
ggplot(spotify) +
geom_boxplot(aes(x=new_genre , y=danceability)) +
labs(x = "new_genre",
y = "danceability") +
theme_minimal()
#Se puede ver que la musica latina es mas bailable que las demas, tiene sentido el grafico
#------------------------------
#ejercicio 10
spotify <- spotify |>
mutate(duration_min = duration_ms/60000,
song_length = case_when(
duration_min < 2.5 ~ "Short",
duration_min >= 2.5 & duration_min <= 4 ~ "Medium",
duration_min > 4 ~ "Long"
))
ggplot(spotify, aes(x = song_length, fill = song_length)) +
geom_bar() +
labs(title = "Distribución de Duración de Canciones",
x = "Duración de la Canción",
y = "Cantidad de Canciones") +
theme_minimal()
spotify  <- read.csv("spotify_data.csv")
summary_stats <-spotify |>
summarise(mean_popularity=mean(popularity,na.rm= TRUE),
median_popularity=median(popularity, na.rm = TRUE),
sd_popularity= sd(popularity, na.rm = TRUE),
iqr_popularity=IQR(popularity, na.rm = TRUE))
summary_stats
##ejercicio 2
ggplot(spotify,aes(x=popularity))+
geom_histogram(binwidth = 5,fill="blue",color="black",alpha=0.7)+
geom_vline(aes(xintercept = mean(popularity,na.rm = TRUE)),color="red",linetype="dashed")+
geom_vline(aes(xintercept = median(popularity,na.rm = TRUE)),color="green",linetype="dashed")+
labs(title="Distribucion de Popularidad en Spotify",x="Popularidad", y="Frecuencia") +
theme_minimal()
##ejercicio 3
ggplot(spotify,aes(y=popularity))+
geom_boxplot(fill="purple",alpha=0.7)+
labs(title = "Diagrama de Caja de Popularidad",y="popularidad")+
theme_minimal()
##ejercicio 4
ggplot(spotify, aes(x = explicit, y = popularity, fill = explicit)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Popularidad segun Contenido Explicito", x = "Explicito", y = "Popularidad") +
theme_minimal()
##ejercicio 5
ggplot(spotify, aes(x = danceability, y = energy)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Relacion entre Bailabilidad y Energia", x = "Danceability", y = "Energy") +
theme_minimal()
cor(spotify$danceability, spotify$energy, use = "complete.obs")
####
# Pero qué nos dice el gráfico? La línea roja tiende ser negativa, al igual que la correlación
####
#ejercicio 6
ggplot(spotify) +
geom_histogram(aes(x = popularity)) +
facet_wrap(~ year) +
theme_minimal()
spotify$year <-as.numeric(spotify$year)
spotify_new <- spotify |> filter(year == 2005)
##ejercicio 7
spotify_new |>
group_by(explicit) |>
summarise(mean_popularity = mean(popularity, na.rm = TRUE),
median_popularity = median(popularity, na.rm = TRUE))
##ejercicio 8
ggplot(spotify_new, aes(x = popularity, y = loudness)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Relacion entre Popularidad y Loudness", x = "Popularidad", y = "Loudness") +
theme_minimal()
##ejercicio 9
spotify <- spotify |>
mutate(new_genre = case_when(
str_detect(genre, "latin") ~ "Latin",
str_detect(genre, "rock") ~ "Rock",
TRUE ~ "Other"))
ggplot(spotify, aes(x = new_genre, y = danceability, fill = new_genre)) +
geom_boxplot(alpha = 0.7) +
labs(title = "Danceability por Genero", x = "Genero", y = "Danceability") +
theme_minimal()
##ejercicio 10
spotify <- spotify |>
mutate(duration_min = duration_ms / 60000,
song_length = case_when(
duration_min < 2.5 ~ "Short",
duration_min >= 2.5 & duration_min <= 4 ~ "Medium",
TRUE ~ "Long" ))
ggplot(spotify, aes(x = song_length, fill = song_length)) +
geom_bar(alpha = 0.7) +
labs(title = "Cantidad de Canciones por Duracion", x = "Duracion", y = "Cantidad") +
theme_minimal()
spotify  <- read.csv("spotify_data.csv")
# Calcular la media
mean_popularity <- mean(spotify$popularity, na.rm = TRUE)
# Calcular la mediana
median_popularity <- median(spotify$popularity, na.rm = TRUE)
# Calcular la desviación estándar
sd_popularity <- sd(spotify$popularity, na.rm = TRUE)
# Calcular el rango intercuartílico (IQR)
iqr_popularity <- IQR(spotify$popularity, na.rm = TRUE)
ggplot(spotify, aes(x = popularity)) +
geom_histogram(bins = 20, fill = "#69b3a2", color = "black", alpha = 0.7) +
geom_vline(aes(xintercept = mean_popularity), color = "red", linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = median_popularity), color = "blue", linetype = "dashed", size = 1) +
labs(title = "Distribución de la Popularidad de las Canciones en Spotify",
x = "Popularidad",
y = "Frecuencia") +
theme_minimal()
ggplot(spotify, aes(y = popularity)) +
geom_boxplot(fill = "#69b3a2", color = "black", outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
labs(title = "Diagrama de Caja de la Popularidad en Spotify",
y = "Popularidad") +
theme_minimal()
#Ejercicio 4
ggplot(spotify, aes(x = as.factor(explicit), y = popularity, fill = as.factor(explicit))) +
geom_boxplot(outlier.color = "red", outlier.shape = 16, outlier.size = 2) +
scale_fill_manual(values = c("#69b3a2", "#ff6666"), labels = c("No explícitas", "Explícitas")) +
labs(title = "Diagrama de Caja de Popularidad según Explicit",
x = "Explícita",
y = "Popularidad",
fill = "Tipo de Canción") +
theme_minimal()
# Grafico de dispersion
ggplot(spotify, aes(x = danceability, y = energy)) +
geom_point(color = "#69b3a2", alpha = 0.5) +  # Puntos en el gráfico
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Línea de tendencia
labs(title = "Relación entre Danceability y Energy",
x = "Danceability",
y = "Energy") +
theme_minimal()
# correlacion
correlation <- cor(spotify$danceability, spotify$energy)
correlation
ggplot(spotify) +
geom_histogram(aes(x = popularity)) +
labs(x = "Popularity Score", y = "Frequency") +
facet_wrap(~ year) +
theme_minimal()
# Filtrar los datos para el año con menor presencia de outliers (2005)
spotify_new <- spotify %>%
filter(year == 2005)
### Calcular la media y mediana de popularity dependiendo de si la canción es explícita
summary_stats <- spotify_new %>%
group_by(explicit) %>%
summarize(
mean_popularity = mean(popularity, na.rm = TRUE),  # Media
median_popularity = median(popularity, na.rm = TRUE)  # Mediana
)
summary_stats
#  gráfico de dispersión con popularity en el eje X y speechiness en el eje Y
ggplot(spotify_new, aes(x = popularity, y = speechiness)) +
geom_point(color = "#69b3a2", alpha = 0.5) +  # Puntos en el gráfico
labs(title = "Gráfico de dispersión: Popularity vs Speechiness",
x = "Popularity",
y = "Speechiness") +
theme_minimal()
# Crear la nueva variable new_genre
spotify <- spotify |>
mutate(new_genre = case_when(
str_detect(genre, "latin") ~ "Latin",
str_detect(genre, "rock") ~ "Rock",
TRUE ~ "Other"
))
# Contar los casos para cada categoría de new_genre
spotify |>
group_by(new_genre) |>
count()
# Crear el diagrama de caja para danceability por new_genre
ggplot(spotify, aes(x = new_genre, y = danceability)) +
geom_boxplot(fill = c("#FF9999", "#66CC99", "#FFCC66")) +  # Colores para cada categoría
labs(title = "Distribución de Danceability por Género",
x = "Género",
y = "Danceability") +
theme_minimal()
spotify <- spotify %>%
mutate(duration_min = duration_ms / 60000)
head(spotify)
library(dplyr)
spotify <- spotify %>%
mutate(song_length = case_when(
duration_min < 2.5 ~ "Short",
duration_min >= 2.5 & duration_min <= 4 ~ "Medium",
duration_min > 4 ~ "Long"
))
head(spotify)
ibrary(ggplot2)
ggplot(spotify, aes(x = song_length, fill = song_length)) +
geom_bar() +
labs(title = "Cantidad de Canciones por Categoría de Duración",
x = "Duración de la Canción",
y = "Cantidad de Canciones") +
scale_fill_manual(values = c("Short" = "#FF9999", "Medium" = "#66CC99", "Long" = "#FFCC66")) + # Colores personalizados
theme_minimal()
spotify  <- read.csv("spotify_data.csv")
mean(spotify$popularity)   #59.8725
median(spotify$popularity) #65.5
sd(spotify$popularity)     #21.33558
IQR(spotify$popularity)    #17
ggplot(spotify) +
geom_histogram(aes(x = popularity), #No quedo muy claro como implementar la función "geom_vline"(ayuda con IA ,para sintaxis)
fill = "green",
color = "blue",
bins = 30) +     # 30 bins para poder ver con  mas detalle el grafico.
geom_vline(aes(xintercept = mean(popularity)), color = "red", linetype = "dashed") # Línea de la media
geom_vline(aes(xintercept = median(popularity)), color = "green", linetype = "dashed") # Línea de la mediana
labs(y = "Frequency",
x = "Popularity") +
theme_minimal() #Podemos observar una distribución sesgada a la izquierda ,principalmente vemos una bimodal, desde
ggplot(spotify) +
geom_histogram(aes(x = popularity), #No quedo muy claro como implementar la función "geom_vline"(ayuda con IA ,para sintaxis)
fill = "green",
color = "blue",
bins = 30) +     # 30 bins para poder ver con  mas detalle el grafico.
geom_vline(aes(xintercept = mean(popularity)), color = "red", linetype = "dashed") # Línea de la media
ggplot(spotify) +
geom_histogram(aes(x = popularity), #No quedo muy claro como implementar la función "geom_vline"(ayuda con IA ,para sintaxis)
fill = "green",
color = "blue",
bins = 30) +     # 30 bins para poder ver con  mas detalle el grafico.
geom_vline(aes(xintercept = mean(popularity)), color = "red", linetype = "dashed") +# Línea de la media
geom_vline(aes(xintercept = median(popularity)), color = "green", linetype = "dashed") + # Línea de la mediana
labs(y = "Frequency",
x = "Popularity") +
theme_minimal() #Podemos observar una distribución sesgada a la izquierda ,principalmente vemos una bimodal, desde
ggplot(spotify) +
geom_boxplot(aes(x=popularity)) +
labs(x = "Popularity") +
theme_minimal()
ggplot(spotify) +
geom_boxplot(aes(x=popularity , y=explicit)) +
labs(x = "Popularity",
y = "explicit(contiene contenido explicito TRUE or FALSE") +
theme_minimal()
### Ejercicio 5
ggplot(spotify) +
geom_point(aes(x = log(danceability), y = energy)) +           #Empleamos "Log" para ver mas claramente los puntos de dispersion
geom_smooth(aes(x = log(danceability), y = energy), color = "blue") +
labs(x = "log(Que tan bailable es la canción)",
y = "Energy (Intensidad de la canción)") +
theme_minimal()
cor(spotify$danceability, spotify$energy)  #-0.1040384
ggplot(spotify) +
geom_histogram(aes(x=popularity)) +
labs(x = "Popularity Score", y = "Frequency") +  #Codigo proporcionado
facet_wrap(~ year) +
theme_minimal()
spotify_new <- spotify |>
filter(year == 2009)     #Alo que a simple vista contiene mas outliers
nrow(spotify)     # 2000 (Numero de filas)
nrow(spotify_new) # 84(numeor de filas) Verificamos si la nueva base de datos contiene muchos menos registros
spotify_new |>
group_by(explicit) |>
summarise(
mean_popularity = mean(popularity, na.rm = TRUE),   #Debemos agrupar para que se pueda calcular la mediana y media de popularidad
median_popularity = median(popularity, na.rm = TRUE)# con respecto a a la variable "explicit"
)
spotify_new |>
group_by(explicit) |>
summarise(
mean_popularity = mean(popularity, na.rm = TRUE),   #Debemos agrupar para que se pueda calcular la mediana y media de popularidad
median_popularity = median(popularity, na.rm = TRUE)# con respecto a a la variable "explicit"
)
ggplot(spotify_new)+
geom_point(aes(x=log(popularity), y= loudness)) +
labs(x = "log(Popularidad)",
y = "Volumen promedio de la canción en decibeles (dB)") +
theme_minimal()
spotify <- spotify |>
mutate(new_genre = case_when(
str_detect(genre, "latin") ~ "Latin",  #Variable dada por el ejercicio "new_genre"
str_detect(genre, "rock") ~ "Rock",
TRUE ~ "Other"
))
spotify |>
group_by(new_genre) |>
count()
ggplot(spotify) +
geom_boxplot(aes(x=new_genre, y=danceability)) +
labs(x = "Genero",
y = "Bailabilidad") +
theme_minimal()
spotify <- spotify |>
mutate(
duration_min = duration_ms / 60000,  # Funcion para convertir de milisegundos a minutos (60000 milisegundos = 1 minuto)
song_length = case_when(
duration_min < 2.5 ~ "Short",
duration_min >= 2.5 & duration_min <= 4 ~ "Medium",
duration_min > 4 ~ "Long"
)
)
ggplot(spotify) +
geom_bar(aes(x = song_length, fill = song_length)) +
labs(x = "Duracion de canciones",
y = "Numero de canciones") +
theme_minimal()
spotify  <- read.csv("spotify_data.csv")
spotify |>
summarise(mean_popularity = mean(popularity),
median_popularity = median(popularity),
sd_popularity = sd(popularity),
IQR_popularity = IQR(popularity))
ggplot(spotify) +
geom_histogram(aes(x=popularity),
fill = "lightblue",
color = "blue",
bins=50) +
labs(x = "Popularity", y = "Frecuency") +
geom_vline(aes(xintercept = mean(popularity), color = "red",)) +
geom_vline(aes(xintercept = median(popularity), color = "green"))
ggplot(spotify) +
geom_boxplot(aes(x=popularity)) +
labs(x="Popularity")
ggplot(spotify) +
geom_boxplot(aes(x=popularity, y=explicit)) +
labs(x="Popularity", y="Explicit")
# 1: Grafico de dispersion con linea de tendencia suavizada
ggplot(spotify) +
geom_point(aes(x= danceability, y=energy), color = "pink") +
geom_smooth(aes(x= danceability, y=energy), color = "brown")
# 2: Se calcula el indice de correlacion
spotify|>
summarise(cor(danceability, energy))
ggplot(spotify) +
geom_histogram(aes(x=popularity)) +
labs(x = "Popularity Score", y = "Frequency") +
facet_wrap(~ year) +
theme_minimal()
spotify_new <- spotify |>
filter(year == 2017)
glimpse(spotify_new)
## Se calcula la media y la  mediana de la variable popularity dependiendo si es explicita o no.
spotify_new |>
group_by(explicit)|>
summarise(mean_popularity=mean(popularity),
median_popularity=median(popularity))
## Se crea un grafico de dispersion con la variable popularity en el eje x y en el eje y la variable loudness.
ggplot(spotify_new) +
geom_point(aes(x= popularity, y=loudness), color = "brown")
spotify <- spotify |>
mutate(new_genre = case_when(
str_detect(genre, "latin") ~ "Latin",
str_detect(genre, "rock") ~ "Rock",
TRUE ~ "Other"))
spotify |>
group_by(new_genre) |>
count()
ggplot(spotify) +
geom_boxplot(aes(x=danceability, y=new_genre), color= "blue", fill="lightblue") +
labs(x="Danceability", y="Genre")
spotify <- spotify|>
mutate(duration_min= duration_ms/60000)
glimpse(spotify)
spotify <- spotify |>
mutate(
song_lenght = case_when(
duration_min <= 2.5 ~ "Short",
duration_min > 2.5 & duration_min <= 4 ~ "Medium",
duration_min > 4 ~ "Long",
TRUE ~ NA_character_))
glimpse(spotify)
4*3.5
14/5
