{
  "hash": "9039d6f8774b5de33c09d94e3054f28f",
  "result": {
    "markdown": "---\ntitle: \"ggplot y tidyverse - Soluciones\"\n\nlang: es\n\nformat: \n  closeread-html:\n   css: msaz.css\n   code-tools: false\n   fig-format: svg\n   toc: true\n   linkcolor: tomato\n---\n\n\n\nEstas son las soluciones para las ejercicios en las diapositivas de [ggplot y tidyverse](https://rawcdn.githack.com/ccardonaandrade/analitica_2025/6ccf6062a232749bfe8365895b5f3958bc2c0c64/diapositivas/02_ggplot_tidy/index.html#/title-slide){target=\"_blank\"}\n\n     \n## Ejercicio 1\n\nAbran un R Script, y utilizando la siguiente plantilla, carguen los paquetes `tidyverse` y `gapminder`. Instálenlos desde la consola si es la primera vez que usan su PC actual.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## ------------------------------\n## Taller 1\n##\n## Autor: \n##\n## Fecha: \n## ------------------------------\n   \n## cargamos todos los paquetes que usaremos en la sesión:\n\nlibrary(tidyverse)\nlibrary(gapminder)\n\n## ---------------------------\n\n### Ejercicio 1\n```\n:::\n\n\nLa idea de tener esta plantilla es ayudarlos a que mantengan un orden y puedan leer su código de mejor manera.\n\n\n#### Instalación de los paquetes\n\nSi es la primera vez que van a usar un paquete, recuerden **siempre** instalarlo en el computador antes de cargarlo. ¿Cómo hacerlo? Con la función `install.packages()` y el nombre del paquete entre comillas. Si estos paquetes ya están instalados en su computador, pueden omitir este paso y simplemente cargarlos con `library()`. Mi sugerencia para instalarlos es que usen la consola para escribir:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\ninstall.packages(\"gapminder\")\n```\n:::\n\n\nOtra manera de hacerlo usando notación de vectores es:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"tidyverse\", \"gapminder\"))\n```\n:::\n\n\nLos paquetes se instalan **una única vez** por computador.\n\n#### Cargar los paquetes a la sesión actual de R Studio\n\nLuego de esto pueden cargar los paquetes con la función `library()`. Los paquetes se cargan **siempre** en una nueva sesión de R Studio:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(gapminder)\n```\n:::\n\n\nPor otro lado, la función `library()` **no** acepta la notación vectorial. Observen el error al tratar de cargar ambos paquetes a la vez:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(c(tidyverse,gapminder))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in library(c(tidyverse, gapminder)): 'package' must be of length 1\n```\n:::\n:::\n\n\n\n\n#### ¿Cómo darle un vistazo a los datos?\n\nLa función `glimpse()` nos proporciona una vista rápida del número de filas y columnas, los nombres de las variables, sus tipos y algunos de sus valores.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(gapminder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,704\nColumns: 6\n$ country   <fct> \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", \"Afghanistan\", …\n$ continent <fct> Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, …\n$ year      <int> 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992, 1997, …\n$ lifeExp   <dbl> 28.801, 30.332, 31.997, 34.020, 36.088, 38.438, 39.854, 40.8…\n$ pop       <int> 8425333, 9240934, 10267083, 11537966, 13079460, 14880372, 12…\n$ gdpPercap <dbl> 779.4453, 820.8530, 853.1007, 836.1971, 739.9811, 786.1134, …\n```\n:::\n:::\n\n\n\nPueden comparar `glimpse(gapminder)` con `head(gapminder)`. Mientras que `glimpse()` nos muestra un resumen de todas las variables, `head()` solo nos muestra las primeras filas del dataset.\n\n\n\n## Ejercicio 2\n\n\nGrafiquen las siguientes 4 gráficas usando la consola. ¿Cuál eligirían y por qué? Escriban el código de la gráfica elegida en el script y respondan a las preguntas usando comentarios precedidos por `#`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) + \n  geom_point()\n\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, size = continent)) + \n  geom_point()\n\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, shape = continent)) + \n  geom_point()\n\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, alpha = continent)) + \n  geom_point()\n```\n:::\n\n\n\nEn este ejercicio, la idea es que observen cómo cambian los atributos dentro del mapeo estético según la variable `continent`. Como pueden ver en los gráficos de abajo, excepto en la gráfica que cambia el atributo color, el resto no permite distinguir claramente cada continente. Quiero destacar cómo en cada gráfica la función `ggplot()` genera automáticamente una leyenda a la derecha, explicando cómo el atributo varía según el continente.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.svg)\n:::\n:::\n\n\n\nAcá no había respuesta correcta, sin embargo, debería aparecer en su R Script algo como esto:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Ejercicio 2\n\nggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, color = continent)) + \n  geom_point()\n\n# Elijo esta gráfica porque con el resto de atributos (size, shape, alpha) no es posible distinguir\n# cada continente\n```\n:::\n\n\n\n## Ejercicio 3 {.medium}\n\nHagamos un gráfico de barras sencillo para visualizar la cantidad de observaciones por continente en los datos `gapminder`. \n\n#### Punto 1\n\nUsen `geom_bar()` como objeto geométrico y mapeen el eje `x` a `continent`.\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder) + \n  geom_bar(aes(x=continent)) \n```\n:::\n\n:::\n\n::: {.column  width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.svg){fig-align='center'}\n:::\n:::\n\n:::\n:::\n\n\n#### Punto 2\n\nLos gráficos llenos de gris no son muy atractivos. Vamos a agregar color al gráfico mapeando el atributo `fill` a `continent`.\n\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder) + \n  geom_bar(aes(x=continent, fill=continent)) \n```\n:::\n\n:::\n\n::: {.column  width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.svg){fig-align='center'}\n:::\n:::\n\n:::\n:::\n\n\n\n#### Punto 3\n\nAhora que el gráfico tiene color, vamos a mejorar aún más su estética. Revisen la página de [paletas de colores Brewer](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html){target=\"_blank\"}, elijan una de las paletas de colores que allí encuentran y agreguen la capa `scale_fill_brewer(palette = \"nombre_de_paleta\")`. \n\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder) + \n  geom_bar(aes(x=continent, fill=continent)) +\n  scale_fill_brewer(palette = \"Set2\") + \n```\n:::\n\n:::\n\n::: {.column  width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.svg){fig-align='center'}\n:::\n:::\n\n:::\n:::\n\n\n\n#### Punto 4\n\nPara ser más claros, modifiquen los nombres de los ejes a `y = \"Frequency\"` y `x = \"Continent\"`. La diapositiva 41 tiene un ejemplo de cómo hacerlo. \n\nEsto se realiza con la opción `labs()`\n\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder) + \n  geom_bar(aes(x=continent, fill=continent)) +\n  scale_fill_brewer(palette = \"Set2\") + \n  labs(y = \"Frequency\", x = \"Continent\")\n```\n:::\n\n:::\n\n::: {.column  width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.svg){fig-align='center'}\n:::\n:::\n\n:::\n:::\n\n\n#### Punto 5\n\nEn este caso la guía de los continentes parece innecesaria. Eliminémosla agregando la capa `guides(fill=FALSE)`.\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + \n  geom_bar(aes(x=continent, fill=continent)) + \n  scale_fill_brewer(palette = \"Set2\") + \n  labs(x = \"Continent\", y = \"Frequency\") + \n  guides(fill=FALSE)\n```\n:::\n\n:::\n\n::: {.column  width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.svg){fig-align='center'}\n:::\n:::\n\n:::\n:::\n\n\n\n#### Punto 6\n\n`ggplot` usa un fondo gris por defecto. Elijan entre `theme_minimal()` o `theme_classic()` como última capa.\n\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder) + \n  geom_bar(aes(x=continent, fill=continent)) + \n  scale_fill_brewer(palette = \"Set2\") + \n  labs(x = \"Continent\", y = \"Frequency\") + \n  guides(fill=FALSE) +\n  theme_classic()\n```\n:::\n\n:::\n\n::: {.column  width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.svg){fig-align='center'}\n:::\n:::\n\n:::\n:::\n\nNoten cómo en la última gráfica cambié `ggplot(data = gapminder)` por `ggplot(gapminder)`. La función `ggplot()` reconoce que su primer argumento siempre es el conjunto de datos. Además, los argumentos dentro de cada capa se separan con comas, como en `geom_bar(aes(x = continent, fill = continent))` o `labs(x = \"Continent\", y = \"Frequency\")`.\n\n\n\n## Ejercicio 4  {.medium}\n\nPara los datos de `gapminder`, usen `filter()` y operadores lógicos para seleccionar:\n\n#### Punto 1\n\nLos datos para el siguiente país que quisieran visitar\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(country == \"Argentina\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 6\n   country   continent  year lifeExp      pop gdpPercap\n   <fct>     <fct>     <int>   <dbl>    <int>     <dbl>\n 1 Argentina Americas   1952    62.5 17876956     5911.\n 2 Argentina Americas   1957    64.4 19610538     6857.\n 3 Argentina Americas   1962    65.1 21283783     7133.\n 4 Argentina Americas   1967    65.6 22934225     8053.\n 5 Argentina Americas   1972    67.1 24779799     9443.\n 6 Argentina Americas   1977    68.5 26983828    10079.\n 7 Argentina Americas   1982    69.9 29341374     8998.\n 8 Argentina Americas   1987    70.8 31620918     9140.\n 9 Argentina Americas   1992    71.9 33958947     9308.\n10 Argentina Americas   1997    73.3 36203463    10967.\n11 Argentina Americas   2002    74.3 38331121     8798.\n12 Argentina Americas   2007    75.3 40301927    12779.\n```\n:::\n:::\n\n\nEn este punto podrían utilizar la función `View(gapminder)` para buscar el país que les llamara la atención. \n\n#### Punto 2\n\n¿Por qué ese país?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Acá valía cualquier cosa. Ejemplo: Me encanta el fútbol!\n```\n:::\n\n\n#### Punto 3\n\nTodos los datos en el año 2007 y para el continente del país en los puntos anteriores\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 2007,\n  continent == \"Americas\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 25 × 6\n   country            continent  year lifeExp       pop gdpPercap\n   <fct>              <fct>     <int>   <dbl>     <int>     <dbl>\n 1 Argentina          Americas   2007    75.3  40301927    12779.\n 2 Bolivia            Americas   2007    65.6   9119152     3822.\n 3 Brazil             Americas   2007    72.4 190010647     9066.\n 4 Canada             Americas   2007    80.7  33390141    36319.\n 5 Chile              Americas   2007    78.6  16284741    13172.\n 6 Colombia           Americas   2007    72.9  44227550     7007.\n 7 Costa Rica         Americas   2007    78.8   4133884     9645.\n 8 Cuba               Americas   2007    78.3  11416987     8948.\n 9 Dominican Republic Americas   2007    72.2   9319622     6025.\n10 Ecuador            Americas   2007    75.0  13755680     6873.\n# ℹ 15 more rows\n```\n:::\n:::\n\n\n#### Punto 4\n\nFilas donde la expectativa de vida sea mayor a 82 en el año 2007 y que no sean Oceanía\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 2007,\n  lifeExp > 82,\n  continent != \"Oceania\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  country          continent  year lifeExp       pop gdpPercap\n  <fct>            <fct>     <int>   <dbl>     <int>     <dbl>\n1 Hong Kong, China Asia       2007    82.2   6980412    39725.\n2 Japan            Asia       2007    82.6 127467972    31656.\n```\n:::\n:::\n\n\n\nAl igual que en `ggplot()`, los argumentos dentro de los verbos del paquete `dplyr` van separados por comas. Es importante notar cómo el código se vuelve más legible cuando cada argumento se coloca en una línea distinta, en lugar de escribir todo en una sola línea. Por ejemplo, el siguiente código es más difícil de leer que el anterior:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |> filter(year == 2007, lifeExp > 82, continent != \"Oceania\")\n```\n:::\n\n\n\n## Ejercicio 5 {.medium}\n\n#### Punto 1\n\n¿Cuál es la expectativa de vida más baja en `gapminder`? ¿Qué país la tiene y en qué año?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  arrange(lifeExp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 6\n   country      continent  year lifeExp     pop gdpPercap\n   <fct>        <fct>     <int>   <dbl>   <int>     <dbl>\n 1 Rwanda       Africa     1992    23.6 7290203      737.\n 2 Afghanistan  Asia       1952    28.8 8425333      779.\n 3 Gambia       Africa     1952    30    284320      485.\n 4 Angola       Africa     1952    30.0 4232095     3521.\n 5 Sierra Leone Africa     1952    30.3 2143249      880.\n 6 Afghanistan  Asia       1957    30.3 9240934      821.\n 7 Cambodia     Asia       1977    31.2 6978607      525.\n 8 Mozambique   Africa     1952    31.3 6446316      469.\n 9 Sierra Leone Africa     1957    31.6 2295678     1004.\n10 Burkina Faso Africa     1952    32.0 4469979      543.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nLa expectativa más baja en todo el conjunto de datos la tiene Rwanda en 1992.\n\n#### Punto 2\n\n¿Cuál es la expectativa de vida más alta en `gapminder`? ¿Qué país la tiene y en qué año?\n\nAcá usamos la opción `desc()` de la función para cambiar el orden de mayor a menor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  arrange(desc(lifeExp))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 6\n   country          continent  year lifeExp       pop gdpPercap\n   <fct>            <fct>     <int>   <dbl>     <int>     <dbl>\n 1 Japan            Asia       2007    82.6 127467972    31656.\n 2 Hong Kong, China Asia       2007    82.2   6980412    39725.\n 3 Japan            Asia       2002    82   127065841    28605.\n 4 Iceland          Europe     2007    81.8    301931    36181.\n 5 Switzerland      Europe     2007    81.7   7554661    37506.\n 6 Hong Kong, China Asia       2002    81.5   6762476    30209.\n 7 Australia        Oceania    2007    81.2  20434176    34435.\n 8 Spain            Europe     2007    80.9  40448191    28821.\n 9 Sweden           Europe     2007    80.9   9031088    33860.\n10 Israel           Asia       2007    80.7   6426679    25523.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nLa expectativa más alta en todo el conjunto de datos la tiene Japón en 2007.\n\n\n## Ejercicio 6  {.medium}\n\n#### Punto 1\n\nSeleccionen solo las columnas `year`, `lifeExp` y `country` en `gapminder`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  select(year, lifeExp, country)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 3\n    year lifeExp country    \n   <int>   <dbl> <fct>      \n 1  1952    28.8 Afghanistan\n 2  1957    30.3 Afghanistan\n 3  1962    32.0 Afghanistan\n 4  1967    34.0 Afghanistan\n 5  1972    36.1 Afghanistan\n 6  1977    38.4 Afghanistan\n 7  1982    39.9 Afghanistan\n 8  1987    40.8 Afghanistan\n 9  1992    41.7 Afghanistan\n10  1997    41.8 Afghanistan\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nNuevamente, los argumentos van separados por comas.\n\n#### Punto 2\n\nSeleccionen todas las columnas *excepto* `year`, `lifeExp` y `country` en `gapminder`\n\nRecuerden que el signo `-` se usa para descartar variables en `select()`. Como en muchos otros casos, hay varias maneras de hacerlo. Por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  select(-year, -lifeExp, -country)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 3\n   continent      pop gdpPercap\n   <fct>        <int>     <dbl>\n 1 Asia       8425333      779.\n 2 Asia       9240934      821.\n 3 Asia      10267083      853.\n 4 Asia      11537966      836.\n 5 Asia      13079460      740.\n 6 Asia      14880372      786.\n 7 Asia      12881816      978.\n 8 Asia      13867957      852.\n 9 Asia      16317921      649.\n10 Asia      22227415      635.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\nOtra alternativa es usar notación de vectores:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  select(-c(year, lifeExp, country))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 3\n   continent      pop gdpPercap\n   <fct>        <int>     <dbl>\n 1 Asia       8425333      779.\n 2 Asia       9240934      821.\n 3 Asia      10267083      853.\n 4 Asia      11537966      836.\n 5 Asia      13079460      740.\n 6 Asia      14880372      786.\n 7 Asia      12881816      978.\n 8 Asia      13867957      852.\n 9 Asia      16317921      649.\n10 Asia      22227415      635.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\n\n\n\n## Ejercicio 7  {.medium}\n\n#### Punto 1\n\nCreen una variable llamada `africa` que sea `TRUE` si el país está en el continente africano\n\nEn `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html}, la expresión `continent == \"Africa\"` evalúa si cada elemento de la variable `continent` es igual a `\"Africa\"`. Esto genera un vector lógico (de valores `TRUE` o `FALSE`) del mismo tamaño que la columna `continent.` Luego, `mutate()` agrega este vector como una nueva variable llamada `africa` en el dataset gapminder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  mutate(africa = continent ==\"Africa\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap africa\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl> <lgl> \n 1 Afghanistan Asia       1952    28.8  8425333      779. FALSE \n 2 Afghanistan Asia       1957    30.3  9240934      821. FALSE \n 3 Afghanistan Asia       1962    32.0 10267083      853. FALSE \n 4 Afghanistan Asia       1967    34.0 11537966      836. FALSE \n 5 Afghanistan Asia       1972    36.1 13079460      740. FALSE \n 6 Afghanistan Asia       1977    38.4 14880372      786. FALSE \n 7 Afghanistan Asia       1982    39.9 12881816      978. FALSE \n 8 Afghanistan Asia       1987    40.8 13867957      852. FALSE \n 9 Afghanistan Asia       1992    41.7 16317921      649. FALSE \n10 Afghanistan Asia       1997    41.8 22227415      635. FALSE \n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\n#### Punto 2\n\nAgreguen una columna que sea el logaritmo del GDP per cápita (Pista: usen la función `log()`)\n\nEl nombre de la nueva variable es libre. En este caso, la llamaremos `log_gdp`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  mutate(log_gdp = log(gdpPercap))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 7\n   country     continent  year lifeExp      pop gdpPercap log_gdp\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>   <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.    6.66\n 2 Afghanistan Asia       1957    30.3  9240934      821.    6.71\n 3 Afghanistan Asia       1962    32.0 10267083      853.    6.75\n 4 Afghanistan Asia       1967    34.0 11537966      836.    6.73\n 5 Afghanistan Asia       1972    36.1 13079460      740.    6.61\n 6 Afghanistan Asia       1977    38.4 14880372      786.    6.67\n 7 Afghanistan Asia       1982    39.9 12881816      978.    6.89\n 8 Afghanistan Asia       1987    40.8 13867957      852.    6.75\n 9 Afghanistan Asia       1992    41.7 16317921      649.    6.48\n10 Afghanistan Asia       1997    41.8 22227415      635.    6.45\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\n#### Punto 3\n\nConviertan la expectativa de vida de años a *meses*\n\nAquí no se crea una nueva variable, sino que se modifica `lifeExp`, que ya existe en los datos:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  mutate(lifeExp = lifeExp * 12)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n 1 Afghanistan Asia       1952    346.  8425333      779.\n 2 Afghanistan Asia       1957    364.  9240934      821.\n 3 Afghanistan Asia       1962    384. 10267083      853.\n 4 Afghanistan Asia       1967    408. 11537966      836.\n 5 Afghanistan Asia       1972    433. 13079460      740.\n 6 Afghanistan Asia       1977    461. 14880372      786.\n 7 Afghanistan Asia       1982    478. 12881816      978.\n 8 Afghanistan Asia       1987    490. 13867957      852.\n 9 Afghanistan Asia       1992    500. 16317921      649.\n10 Afghanistan Asia       1997    501. 22227415      635.\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\n\n**Nota:** Todo esto se podía hacer dentro de una sola llamada a `mutate()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  mutate(africa = continent == \"Africa\",\n  log_gdp = log(gdpPercap),\n  lifeExp = lifeExp * 12)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,704 × 8\n   country     continent  year lifeExp      pop gdpPercap africa log_gdp\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl> <lgl>    <dbl>\n 1 Afghanistan Asia       1952    346.  8425333      779. FALSE     6.66\n 2 Afghanistan Asia       1957    364.  9240934      821. FALSE     6.71\n 3 Afghanistan Asia       1962    384. 10267083      853. FALSE     6.75\n 4 Afghanistan Asia       1967    408. 11537966      836. FALSE     6.73\n 5 Afghanistan Asia       1972    433. 13079460      740. FALSE     6.61\n 6 Afghanistan Asia       1977    461. 14880372      786. FALSE     6.67\n 7 Afghanistan Asia       1982    478. 12881816      978. FALSE     6.89\n 8 Afghanistan Asia       1987    490. 13867957      852. FALSE     6.75\n 9 Afghanistan Asia       1992    500. 16317921      649. FALSE     6.48\n10 Afghanistan Asia       1997    501. 22227415      635. FALSE     6.45\n# ℹ 1,694 more rows\n```\n:::\n:::\n\n\n\n## Ejercicio 8  {.medium}\n\n#### Punto 1\n\nCalculen el GDP per cápita promedio en 1977 para cada continente\n\n¿Cómo pensar este procedimiento desde el uso del operador pipe?\n\nLo primero es seleccionar las observaciones para el año 1977 con la función `filter()` de la siguiente manera:\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 1977)\n```\n:::\n\n:::\n\n::: {.column  width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 142 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n 1 Afghanistan Asia       1977    38.4 14880372      786.\n 2 Albania     Europe     1977    68.9  2509048     3533.\n 3 Algeria     Africa     1977    58.0 17152804     4910.\n 4 Angola      Africa     1977    39.5  6162675     3009.\n 5 Argentina   Americas   1977    68.5 26983828    10079.\n 6 Australia   Oceania    1977    73.5 14074100    18334.\n 7 Austria     Europe     1977    72.2  7568430    19749.\n 8 Bahrain     Asia       1977    65.6   297410    19340.\n 9 Bangladesh  Asia       1977    46.9 80428306      660.\n10 Belgium     Europe     1977    72.8  9821800    19118.\n# ℹ 132 more rows\n```\n:::\n:::\n\n:::\n:::\n\n\nLo segundo es agrupar por la variable `continent` con la función `group_by`:\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 1977) |>\n  group_by(continent)\n```\n:::\n\n:::\n\n::: {.column  width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 142 × 6\n# Groups:   continent [5]\n   country     continent  year lifeExp      pop gdpPercap\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n 1 Afghanistan Asia       1977    38.4 14880372      786.\n 2 Albania     Europe     1977    68.9  2509048     3533.\n 3 Algeria     Africa     1977    58.0 17152804     4910.\n 4 Angola      Africa     1977    39.5  6162675     3009.\n 5 Argentina   Americas   1977    68.5 26983828    10079.\n 6 Australia   Oceania    1977    73.5 14074100    18334.\n 7 Austria     Europe     1977    72.2  7568430    19749.\n 8 Bahrain     Asia       1977    65.6   297410    19340.\n 9 Bangladesh  Asia       1977    46.9 80428306      660.\n10 Belgium     Europe     1977    72.8  9821800    19118.\n# ℹ 132 more rows\n```\n:::\n:::\n\n:::\n:::\n\nNoten que en este punto, `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} no realiza ninguna modificación por continente, ya que aún no le hemos dicho qué hacer con esa agrupación. El siguiente proceso complementa el uso de `group_by`.\n\n\nFinalmente, usamos la función `summarise()` para calcular el GDP per cápita promedio. En este caso le di el nombre de `gdp_mean` a la nueva variable. Es útil recordar brevemente que `na.rm = TRUE` ignora los valores faltantes en la columna, lo cual puede ser crucial si los datos contienen valores `NA`. \n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  filter(year == 1977) |>\n  group_by(continent) |>\n  summarise(gdp_mean = mean(gdpPercap, na.rm = TRUE))\n```\n:::\n\n:::\n\n::: {.column  width=\"50%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  continent gdp_mean\n  <fct>        <dbl>\n1 Africa       2586.\n2 Americas     7352.\n3 Asia         7791.\n4 Europe      14284.\n5 Oceania     17284.\n```\n:::\n:::\n\n:::\n:::\n\n\n\n#### Punto 2\n\n¿Por qué el siguiente código no funciona? ¿Cómo lo pueden arreglar?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  summarize(meanLifeExp = mean(lifeExp)) |>\n  group_by(year)\n```\n:::\n\n\nEn el código anterior, el orden de las operaciones es incorrecto. Primero debemos agrupar los datos por `year` antes de calcular la media, ya que `summarize()` reduce el número de filas y, una vez aplicado, no podemos agrupar los datos después. La manera correcta es la siguiente:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngapminder |>\n  group_by(year) |>\n  summarize(meanLifeExp = mean(lifeExp))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 2\n    year meanLifeExp\n   <int>       <dbl>\n 1  1952        49.1\n 2  1957        51.5\n 3  1962        53.6\n 4  1967        55.7\n 5  1972        57.6\n 6  1977        59.6\n 7  1982        61.5\n 8  1987        63.2\n 9  1992        64.2\n10  1997        65.0\n11  2002        65.7\n12  2007        67.0\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}