---
title: "An√°lisis de Datos - Precio de Acciones"

lang: es

format: 
  closeread-html:
   css: msaz.css
   code-tools: false
   fig-format: svg
   toc: true
   linkcolor: tomato
---

üìÖ **Fecha L√≠mite:** Martes 18 de febrero, 6:00 p.m.

**Formato de Entrega:** Me env√≠an el R Script al correo con el formato usual `nombre_apellido.R`. Si realizan el trabajo en parejas, nombren el archivo `nombre1_apellido1_nombre2_apellido2.R`. *Antes de enviar el archivo, aseg√∫rense de que su c√≥digo se ejecuta correctamente en un nuevo R Script limpio*.


**Criterios de evaluaci√≥n:**

‚úî C√≥digo correcto y bien estructurado: si el c√≥digo no ejecuta, descuento la mitad del punto.

‚úî Gr√°ficos generados correctamente: Uso de `ggplot2` con etiquetas claras y colores adecuados.

‚úî Interpretaci√≥n y an√°lisis: Respuesta clara a las preguntas en comentarios y que sea concisa. Si su respuesta tiene m√°s de 3 l√≠neas es **muy** larga.

‚úî Formato y organizaci√≥n: C√≥digo limpio, comentado y con t√≠tulos adecuados en el documento.

     
## Ejercicio 1

Abran un R Script, y utilizando la siguiente plantilla, carguen el paquete `tidyverse`, `tidyfinance` y `scales`. Instalen los dos √∫ltimos paquetes desde la consola ya que es la primera vez que los vamos a utilizar.

```{r}
#| eval: true
#| echo: true
#| warning: false
## ------------------------------
## An√°lisis del Precio de Acciones
##
## Autor(es): 
##
## Fecha: 
## ------------------------------


## cargamos todos los paquetes que usaremos en la sesi√≥n:

library(tidyverse)
library(tidyfinance)
library(scales)

## ---------------------------

### Ejercicio 1
```



Primero descargamos los precios diarios de varias acciones, como Amazon (AMZN), Meta (META), NVIDIA (NVDA), Apple (AAPL), Tesla (TSLA), Netflix (NFLX) y Microsoft (MSFT), directamente desde el proveedor de datos Yahoo Finance. Para descargar los datos, usamos la funci√≥n `download_data`. Para profundizar en su uso, revisen el archivo de ayuda con `?download_data`. Recomiendo especialmente la secci√≥n de ejemplos en la documentaci√≥n. Solicitamos datos diarios para un per√≠odo de 23 a√±os.

```{r}
#| eval: true
#| echo: true
#| warning: false

price_data <- download_data(
  type = "stock_prices",
  symbols = c("AMZN","META","NVDA","AAPL","TSLA","NFLX", "MSFT"),
  start_date = "2000-01-01",
  end_date = "2023-12-31"
)
```

`download_data(type = "stock_prices")` descarga datos del mercado de valores desde Yahoo Finance. La funci√≥n devuelve un *tibble* con ocho columnas bastante autoexplicativas: `symbol`, `date`, el volumen diario (en n√∫mero de acciones negociadas), los precios de mercado de apertura, m√°ximo, m√≠nimo, cierre y el precio ajustado en USD. Los precios ajustados est√°n corregidos por cualquier factor que pueda afectar el precio de la acci√≥n despu√©s del cierre del mercado, como divisiones de acciones y dividendos. Estas acciones afectan los precios cotizados, pero no tienen un impacto directo en los inversionistas que poseen la acci√≥n. Por lo tanto, a menudo nos basamos en los precios ajustados al analizar los rendimientos que un inversionista habr√≠a obtenido al mantener la acci√≥n de forma continua.


Observemos qu√© tienen nuestros datos:

```{r}
#| echo: true
#| eval: true
glimpse(price_data)
```

## Ejercicio 2

Completen el c√≥digo a la izquierda para obtener la gr√°fica de la derecha:

::: columns
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false
#| out-width: 100%
price_data |>
  ggplot(aes(x = date, y = adjusted_close, color = ______)) +
  geom_line() +
  labs(
    x = NULL,
    y = NULL,
    color = "_______",
    title = "Stock prices between beginning of 2000 and end of 2023"
  ) + 
  scale_y_continuous(labels = label_dollar()) +
  theme_minimal()
```
:::

::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
price_data |>
  ggplot(aes(x = date, y = adjusted_close, color = symbol)) +
  geom_line() +
  labs(
    x = NULL,
    y = NULL,
    color = "Company",
    title = "Stock prices between beginning of 2000 and end of 2023"
  ) + 
  scale_y_continuous(labels = label_dollar()) +
  theme_minimal()
```


:::
:::

Describan el gr√°fico anterior con 3 hechos puntuales.

**Nota:** `labels = label_dollar()` es una funci√≥n del paquete `scales` que, como pueden ver en el gr√°fico, a√±ade el s√≠mbolo de d√≥lar a los n√∫meros en el eje.


## Ejercicio 3

Es claro que muchos de los precios son cero antes del a√±o 2015. Elijan una de las empresas a partir del a√±o 2015 bas√°ndose en el siguiente c√≥digo donde elijo a Netflix:


```{r}
#| echo: true
netflix_data <-  price_data |>
  filter(symbol=="NFLX" & year(date)>2014)
```

La variable `date` est√° en formato de fecha. Para poder usar el a√±o, necesitamos la funci√≥n `year()` como lo muestra el anterior c√≥digo. Mis datos se ven as√≠:

```{r}
#| echo: true
netflix_data
```

## Ejercicio 4

Bas√°ndose en el c√≥digo del Ejercicio 2, grafiquemos nuevamente la evoluci√≥n de los precios de las acciones para la compa√±√≠a que ustedes escogieron. En el caso de Netflix, la gr√°fica se ve de la siguiente manera:


```{r}
#| echo: false
#| out-width: 100%
#| fig-align: center
netflix_data |>
  ggplot(aes(x = date, y = adjusted_close)) +
  geom_line(color="darkred") +
  labs(
    x = NULL,
    y = NULL,
    title = "Netflix stock prices"
  ) + 
  scale_y_continuous(labels = label_dollar()) +
  theme_minimal()
```

Describan el comportamiento de los precios de su compa√±√≠a con 3 hechos puntuales.

## Ejercicio 5

Construyan el diagrama de caja y el histograma para el precio de las acciones de la empresa que escogieron. Para el caso de Netflix, los dos gr√°ficos se ven as√≠:

```{r}
#| echo: false
#| eval: true
#| warning: false
#| fig-align: center
#| fig-width: 12

library(patchwork)

p1 <- netflix_data |>
  ggplot(aes(x=adjusted_close)) +
  geom_boxplot() + 
  labs(x="Distribution of daily Netflix stock prices") + 
  scale_x_continuous(labels = label_dollar()) +
  theme_minimal()

p2 <- netflix_data |>
  ggplot(aes(x=adjusted_close)) +
  geom_histogram(fill="lightblue", color="darkblue") + 
  labs(x="Distribution of daily Netflix stock prices",
       y="Frequency") + 
  scale_x_continuous(labels = label_dollar()) +
  theme_minimal()

p1+p2
```


Describan la distribuci√≥n de los precios de las acciones de su compa√±√≠a con 3 hechos puntuales.

## Ejercicio 6

Imaginen que no tenemos acceso a los datos de precios para todos los d√≠as. En este caso, solo disponemos de datos para 100 d√≠as y necesitamos estimar el precio promedio de la acci√≥n durante el per√≠odo 2015-2023.

La funci√≥n `sample_n()` toma una muestra aleatoria de los precios de las acciones de Netflix. En este caso, especificamos que el tama√±o de la muestra sea de 100 d√≠as. Hagan lo mismo para su compa√±√≠a.

```{r}
#| echo: true
#| eval: true
#Establezcamos la semillar para elegir siempre la misma muestra:
set.seed(123)

netflix_sample <- sample_n(netflix_data, 100)  
```


Bas√°ndose en el siguiente gr√°fico, construyan la distribuci√≥n de los precios de su compa√±√≠a para la muestra. ¬øC√≥mo cambia la distribuci√≥n de los precios de la muestra con respecto a la distribuci√≥n de la poblaci√≥n en el punto anterior?

```{r}
#| echo: false
#| eval: true
#| warning: false
#| fig-align: center
netflix_sample |>
  ggplot(aes(x=adjusted_close)) +
  geom_histogram(fill="lightblue", color="darkblue") + 
  labs(x="Distribution of daily Netflix stock prices (sample)",
       y="Frequency") + 
  scale_x_continuous(labels = label_dollar()) +
  theme_minimal()
```




## Ejercicio 7

Utilizando el comando `t.test()`, estimen un intervalo de confianza para el precio de las acciones de su compa√±√≠a basado en la muestra de 100 d√≠as.

En el caso de Netflix, el resultado de la funci√≥n es:

```{r}
#| echo: false
#| eval: true

t.test(netflix_sample$adjusted_close, conf.level = 0.95)
```

El intervalo de confianza al 95% es:

$$IC=[257.79, 312.49]$$

¬øCaptura este intervalo el par√°metro problacional (el precio promedio de las acciones)?

```{r}
#| echo: true
#| eval: true

mean(netflix_data$adjusted_close, na.rm = TRUE)
```

El precio promedio de las acciones es 298.63. Por lo tanto, para el caso de Netflix, el intervalo de confianza s√≠ incluye el par√°metro poblacional. 

Hagan este mismo an√°lisis para la compa√±√≠a que eligieron.

## Ejercicio 8

Repitan el mismo an√°lisis del punto anterior pero con un nivel de confianza del 90%.


## Ejercicio 9

Utilizando la variable `adjusted_close` y la funci√≥n `lag()` (que devuelve el valor anterior en un vector), calculamos los rendimientos netos diarios, definidos como:

  $$r_t=\dfrac{p_t-p_{t-1}}{p_{t-1}}=\dfrac{p_t}{p_{t-1}}-1$$

Completen el siguiente c√≥digo para crear una nueva base de datos `returns` con el rendimiento de una de las empresas. Seleccionen la compa√±√≠a con la que han trabajado en los puntos anteriores.

```{r}
#| echo: true
#| eval: false
returns <- price_data |>
  filter(symbol == "______") |>
  arrange(date) |>
  mutate(______ = adjusted_close / lag(______) - 1) |>
  select(symbol, date, return)
```

Expliquen paso a paso qu√© hace el c√≥digo anterior. Por ejemplo:

1. La primera l√≠nea crea un nuevo objeto llamado `returns` a partir de los datos `price_data`.

2. ...

## Ejercicio 10

Por ejemplo, los datos `returns` se ver√≠an de la siguiente manera para Netflix:

```{r}
#| echo: false
#| eval: true
returns <- price_data |>
  filter(symbol == "NFLX") |>
  arrange(date) |>
  mutate(return = adjusted_close / lag(adjusted_close) - 1) |>
  select(symbol, date, return)

returns
```


¬øQu√© tal se ve la distribuci√≥n del retorno para Netflix?

```{r}
#| echo: false
#| eval: true
#| warning: false
#| fig-align: center

returns |>
  ggplot(aes(x = return)) +
  geom_histogram(fill="lightblue",
                 color="darkblue",
                 bins = 100) +
  labs(
    x = NULL,
    y = NULL,
    title = "Distribution of daily Netflix stock returns"
  ) +
  scale_x_continuous(labels = percent) +
  theme_minimal()
```

Construyan el mismo gr√°fico para su compa√±√≠a y descr√≠banlo con 2 hechos puntuales.

## Ejercicio 11

Por ahora, vamos a eliminar los datos faltantes. Recuerden que esto **no es trivial** ya que pueden existir razones por las cuales no tenemos informaci√≥n de los precios para ciertos d√≠as.

```{r}
#| echo: true
#| eval: true
#| warning: false
returns <- returns |>
  drop_na(return)
```


## Ejercicio 12

A continuaci√≥n, construyamos la distribuci√≥n de los rendimientos diarios en un histograma como en el Ejercicio 10. Sin embargo, le a√±adimos una l√≠nea discontinua que indica el percentil del 5% de los rendimientos diarios, que es una aproximaci√≥n (rudimentaria) del peor rendimiento de la acci√≥n con una probabilidad de, como m√°ximo, 5%. El percentil 5 est√° estrechamente relacionado con el value-at-risk (VaR) hist√≥rico, una medida de riesgo que suele ser monitoreada por los reguladores.

La funci√≥n `quantile()` nos permite calcular cualquier percentil de la distribuci√≥n de un vector. Calculemos el percentil 5 al completar el siguiente c√≥digo:

```{r}
#| echo: true
#| eval: false
#| warning: false
#| fig-align: center
percentile_5 <- quantile(______$return, probs = 0.05)
```


```{r}
#| echo: false
#| eval: true
#| warning: false
#| fig-align: center
percentile_5 <- quantile(returns$return, probs = 0.05)
```

En el caso de Netflix, el percentil 5 es: `r round(percentile_5, 3)`.

## Ejercicio 13

Completen el c√≥digo a la izquierda para obtener la gr√°fica de la derecha para su compa√±√≠a:

::: columns
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false
#| out-width: 100%
returns |>
  ggplot(aes(x = ________)) +
  geom_histogram(fill="lightblue",
                 color="darkblue",
                 bins = 100) +
  geom_vline(aes(xintercept = percentile_5),
             linetype = "dashed") +
  labs(
    x = NULL,
    y = NULL,
    title = "________"
  ) +
  scale_x_continuous(labels = percent) +
  theme_minimal()
```
:::

::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
returns |>
  ggplot(aes(x = return)) +
  geom_histogram(fill="lightblue",
                 color="darkblue",
                 bins = 100) +
  geom_vline(aes(xintercept = percentile_5),
             linetype = "dashed") +
  labs(
    x = NULL,
    y = NULL,
    title = "Distribution of daily Netflix stock returns"
  ) +
  scale_x_continuous(labels = percent) +
  theme_minimal()
```


:::
:::

**Nota:** `labels = percent` es una funci√≥n del paquete `scales` que, como pueden ver en el gr√°fico, a√±ade el s√≠mbolo de porcentaje a los n√∫meros en el eje.


## Ejercicio 14

Completen el siguiente c√≥digo para calcular el volumen total de transacciones diarias en el mercado, defini√©ndolo como la suma del producto entre el n√∫mero de acciones negociadas (`volume`) y el precio ajustado (`adjusted_close`) para cada d√≠a.

```{r}
#| echo: true
#| eval: false
#| warning: false
trading_volume <- price_data |>
  group_by(____) |>
  summarize(trading_volume = sum(_____ * ___________))
```



## Ejercicio 15

```{r}
#| echo: false
#| eval: true
#| warning: false
trading_volume <- price_data |>
  group_by(date) |>
  summarize(trading_volume = sum(volume * adjusted_close))
```

Completen el siguiente c√≥digo para generar un gr√°fico de dispersi√≥n que analice la persistencia en el volumen de transacciones diarias. En el eje X, coloque el volumen total de transacciones del d√≠a anterior y en el eje Y, el volumen total del d√≠a actual.

::: columns
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false
#| out-width: 100%
trading_volume |>
  ggplot(aes(x = lag(___________), y = trading_volume)) +
  geom_point() +
  labs(
    x = "Previous day aggregate trading volume",
    y = "__________________",
    title = "Persistence in daily trading volume of 8 companies"
  ) + 
  scale_x_continuous(labels = unit_format(unit = "B", scale = 1e-9)) +
  scale_y_continuous(labels = unit_format(unit = "B", scale = 1e-9)) +
  theme_minimal()
```
:::

::: {.column width="50%"}

```{r}
#| echo: false
#| out-width: 100%
#| warning: false
trading_volume |>
  ggplot(aes(x = lag(trading_volume), y = trading_volume)) +
  geom_point() +
  labs(
    x = "Previous day aggregate trading volume",
    y = "Aggregate trading volume",
    title = "Persistence in daily trading volume of 8 companies"
  ) + 
  scale_x_continuous(labels = unit_format(unit = "B", scale = 1e-9)) +
  scale_y_continuous(labels = unit_format(unit = "B", scale = 1e-9)) +
  theme_minimal()
```


:::
:::

¬øQu√© patrones observan en la relaci√≥n entre estos valores? Calculen la correlaci√≥n entre ambas variables para respaldar su an√°lisis y explicar el patr√≥n observado.


**Nota:** `labels = unit_format(unit = "B", scale = 1e-9)` es un argumento del paquete `scales` que, como pueden ver en el gr√°fico, formatea los valores para que se expresen en billones.
